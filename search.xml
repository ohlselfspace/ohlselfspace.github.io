<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Maven学习笔记</title>
      <link href="/2020/02/10/maven-xue-xi-bi-ji/"/>
      <url>/2020/02/10/maven-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven学习笔记"><a href="#Maven学习笔记" class="headerlink" title="Maven学习笔记"></a>Maven学习笔记</h1><h2 id="1-Maven介绍以及环境搭建"><a href="#1-Maven介绍以及环境搭建" class="headerlink" title="1.Maven介绍以及环境搭建"></a>1.Maven介绍以及环境搭建</h2><p><strong>Maven</strong>是基于项目对象模型(<strong>POM</strong>)，可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。</p><p>首先到<a href="http://Maven.apache.org/" target="_blank" rel="noopener">官网</a>下载<strong>Apache Maven 3.6.3</strong>版本</p><p><img src="0.png" alt></p><p>在本地下面解压</p><p><img src="1.png" alt></p><p>得到四个文件夹：</p><ul><li><strong>bin</strong>目录包含<strong>Maven</strong>的运行脚本</li><li><strong>boot</strong>目录包含一个类加载器的框架</li><li><strong>conf</strong>是配置文件目录</li><li><strong>lib</strong>是<strong>Maven</strong>依赖的类库</li></ul><p>接下来配置环境变量，在系统变量中设置变量名和变量值，变量值为<strong>Maven</strong>安装目录</p><p><img src="2.png" alt></p><p>接下来在环境变量<strong>path</strong>中添加以下信息</p><p><img src="3.png" alt></p><p>验证<strong>Maven</strong>是否安装成功，打开cmd命令窗口：输入<strong>mvn -v</strong>。如果得到以下配置信息，则说明安装成功。</p><p><img src="4.png" alt></p><hr><h2 id="2-Maven结构以及案例"><a href="#2-Maven结构以及案例" class="headerlink" title="2.Maven结构以及案例"></a>2.Maven结构以及案例</h2><p><strong>Maven</strong>默认的文件结构为：</p><p><img src="5.png" alt></p><p>按照文件结构创建<strong>HelloWorld</strong>类，以及<strong>HelloWorldTest</strong>测试类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldTest</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用junit框架测试</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置<strong>Maven01</strong>目录下配置<strong>pom.xml</strong>文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://Maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://Maven.apache.org/POM/4.0.0http://Maven.apache.org/Maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>com-model<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开<strong>cmd</strong>命令窗口，<strong>cd</strong>到<strong>Maven01</strong>目录下，输入命令：<strong>mvn compile</strong></p><p><img src="6.png" alt></p><p>下面测试一下，输入<strong>mvn test</strong></p><p><img src="7.png" alt></p><p>输入<strong>mvn package</strong>，此时在<strong>Maven01</strong>目录下生成一个<strong>target</strong>文件夹</p><p><img src="8.png" alt></p><p><strong>常用命令总结</strong></p><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">mvn eclipse:eclipse</td><td align="center">生成eclipse项目结构</td></tr><tr><td align="center">mvn idea:idea</td><td align="center">生成idea项目结构</td></tr><tr><td align="center">mvn compile</td><td align="center">编译源代码</td></tr><tr><td align="center">mvn test</td><td align="center">运行测试代码</td></tr><tr><td align="center">mvn package</td><td align="center">打包项目</td></tr><tr><td align="center">mvn clean</td><td align="center">清除项目</td></tr><tr><td align="center">mvn -e</td><td align="center">查看错误详细信息</td></tr><tr><td align="center">mvn install</td><td align="center">安装jar包到本地仓库中</td></tr></tbody></table><hr><h2 id="3-Maven自动创建目录骨架"><a href="#3-Maven自动创建目录骨架" class="headerlink" title="3.Maven自动创建目录骨架"></a>3.Maven自动创建目录骨架</h2><p><strong>Archetype</strong>是<strong>Maven</strong>项目的模板工具包</p><p><strong>Maven Archetype</strong>由下面几个模板组成：</p><ul><li>maven-archetype-plugin:Archetype插件</li><li>archetype-packaging:用于描述archetype的生命周期与构建的项目软件包</li><li>archetype-models:用于描述类与引用</li><li>archetype-common:核心类</li><li>archetype-testing:用于测试Maven Archetype的内部组件</li></ul><p>使用<strong>Maven archetype:generate</strong>来创建项目骨架</p><pre class="line-numbers language-cmd"><code class="language-cmd">mvn archetype:generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>依次创建项目的<strong>groupId,artifaceId,version,package</strong></p><pre class="line-numbers language-cdm"><code class="language-cdm">Confirm properties configuration:groupId: code.Maven02artifactId: Maven02-serviceversion: 1.0.0package: code.Maven02.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建目录的两种方式</strong>:</p><ul><li><p>archetype:generate 按照提示进行选择</p></li><li><p>archetype:generate -DgroupId=组织名,公司网址的反写+项目名</p><p>​                                    -DartifactId=项目名-模块名</p><p>​                                    -Dversion=版本号</p><p>​                                    -Dpackage=代码所存在的包名</p></li></ul><hr><h2 id="4-Maven中的坐标和仓库"><a href="#4-Maven中的坐标和仓库" class="headerlink" title="4.Maven中的坐标和仓库"></a>4.Maven中的坐标和仓库</h2><p><strong>Maven</strong>中任何构件都是由坐标标识</p><p>仓库：</p><ul><li>本地仓库</li><li>远程仓库</li></ul><p>本地仓库位置：C:\Users\logic.m2\repository     logic为本机用户名</p><p>更改本地仓库默认位置：</p><p>在新建一个<strong>repo</strong>文件夹，在D:\maven\apache-maven-3.6.3\conf下修改<strong>settings.xml</strong></p><p><img src="9.png" alt></p><hr><h2 id="5-IDEA中创建Maven项目"><a href="#5-IDEA中创建Maven项目" class="headerlink" title="5.IDEA中创建Maven项目"></a>5.IDEA中创建Maven项目</h2><p>首先打开<strong>IDEA</strong>，点击<strong>setting</strong>，修改<strong>Maven</strong>仓库和配置信息</p><p><img src="10.png" alt></p><p>新建项目，打开<strong>Maven</strong>窗口配置信息</p><p><img src="11.png" alt></p><p><img src="12.png" alt></p><p>第一次创建<strong>Maven</strong>项目要配置相关信息，所以要等待一会。</p><hr><h2 id="6-Maven的生命周期"><a href="#6-Maven的生命周期" class="headerlink" title="6.Maven的生命周期"></a>6.Maven的生命周期</h2><p>完整的项目构建过程包括：</p><p>清理，编译，测试，打包，集成测试，验证，部署</p><p><strong>Maven</strong>生命周期：</p><ul><li><p><strong>clean</strong> 清理项目</p><ul><li><strong>pre-clean</strong> 执行清理前的工作</li><li><strong>clean</strong>清理上一次构建生成的所有文件</li></ul></li><li><p><strong>default</strong>(最核心)构建项目</p><ul><li><em><em>compile  test  package  install  </em></em></li></ul></li><li><p><strong>site</strong> 生成项目站点</p><ul><li><strong>pre-site</strong> 在生成项目站点前要完成的工作</li><li><strong>site</strong> 生成项目的站点文档</li><li><strong>post-site</strong> 在生成项目站点后要完成的工作</li><li><strong>site-deploy</strong> 发布生成的站点到服务器</li></ul></li></ul><hr><h2 id="7-pom-xml解析"><a href="#7-pom-xml解析" class="headerlink" title="7.pom.xml解析"></a>7.pom.xml解析</h2><p><img src="13.png" alt></p><hr>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Java反射机制</title>
      <link href="/2020/02/10/qian-tan-java-fan-she-ji-zhi/"/>
      <url>/2020/02/10/qian-tan-java-fan-she-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射是指能够分析类能力的程序，就是把<strong>java</strong>类中的各种成分映射成<strong>java</strong>对象。反射被称为框架设计的灵魂，对于一个任意的类，能够知道这个类的所有<strong>Field，Method，Constructor</strong>。对于一个实例对象也是如此，动态获取信息以及动态调用对象的方法。</p><ul><li>在运行时分析类的能力</li><li>在运行是查看对象</li></ul><hr><h2 id="获取Class类"><a href="#获取Class类" class="headerlink" title="获取Class类"></a>获取Class类</h2><p>任何一个类都是<strong>Class</strong>类的实例对象，这个实例对象有三种表示方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    第一种表达方式， 类名 对象 = 类名.class    任何一个类都有一个隐含的静态成员变量class*/</span>Class <span class="token class-name">c1</span> <span class="token operator">=</span> Employee<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已经定义了一个Employee类</span><span class="token comment" spellcheck="true">/*    第二种方式， 通过该类的对象调用getClass方法    那么首先需要创建一个Employee的实例对象*/</span>Employee e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">c2</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    c1,c2表示Employee类的类类型（class type）*/</span><span class="token comment" spellcheck="true">/*    第三种方式， Class c3 = Class.forName(String className)    此参数字符串必须是真实路径，就是带包名的类路径，包名.类名    Employee类code包下,需要注意的是该方法有异常ClassNotFoundException抛出，    需要声明该异常*/</span><span class="token keyword">class</span> <span class="token class-name">c3</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"code.Employee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    常用方法newInstance(),可以动态创建一个类的实例    查看源码发现newInstance()自Java9被标记不推荐使用    改为使用c1.getDeclaredConstructor().newInstance()，同样需要抛出异常*/</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ul><li><strong>c1,c2,c3</strong>的内存地址是相同的，一个类只产生一个<strong>class</strong>对象，由<strong>jvm</strong>自动创建。</li><li><strong>Class.forName(String className)</strong>代表了动态加载类。编译时刻加载类是静态加载类，例如<strong>new</strong>实例对象，而运行时刻加载类是动态加载类。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动态加载类，在运行时刻加载</span>Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    这里有个设计技巧，可以实现一个公共接口People，这样就不用关心args[0]传入的    具体类实现*/</span>People a <span class="token operator">=</span> <span class="token punctuation">(</span>People<span class="token punctuation">)</span>c<span class="token punctuation">.</span>getDeclaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h2 id="获取Method信息"><a href="#获取Method信息" class="headerlink" title="获取Method信息"></a>获取Method信息</h2><ul><li><strong>Class</strong>类的<strong>getMethods()</strong>方法获取所有的<strong>public</strong>函数，包括父类继承的。返回<strong>Method[]</strong></li><li><strong>Class</strong>类的<strong>getDeclaredMethods()</strong>获取所有该类声明的方法，不管访问权限</li><li><strong>Class</strong>类的<strong>getName()</strong>方法得到用于描述构造器，方法和域名的的字符串</li><li><strong>Method</strong>类的<strong>getReturnType()</strong>得到方法的返回值类型</li><li><strong>Method</strong>类的<strong>getName()</strong>得到方法的名称</li><li><strong>Method</strong>类的<strong>getParameterType()</strong>得到参数列表的类型的类类型</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//得到一个Class类</span>Class <span class="token class-name">c</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">returnType</span> <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String a <span class="token operator">=</span> returnType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="获取Field信息"><a href="#获取Field信息" class="headerlink" title="获取Field信息"></a>获取Field信息</h2><ul><li><strong>Class</strong>类的<strong>getFields()</strong>方法获取的是所有的<strong>public</strong>的成员变量的信息。返回<strong>Field[]</strong></li><li><strong>Class</strong>类的<strong>getDeclaredFields()</strong>方法获取的是该类自己声明的成员变量的信息</li><li><strong>Class</strong>类的<strong>getConstructors()</strong>方法获取的是所有<strong>public</strong>的构造函数</li><li><strong>Class</strong>类的<strong>getDeclaredConstructors()</strong>方法获取的是所有的构造函数</li><li><strong>Field</strong>类的<strong>getType()</strong>方法得到变量的类型的类类型</li><li><strong>Field</strong>类<strong>getName()</strong>方法得到成员变量的名称</li></ul><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">c</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到成员变量的类型的类类型</span>Class <span class="token class-name">filedType</span> <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String typeName <span class="token operator">=</span> filedType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到成员变量的名称</span>String fieldName <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变</p><hr><h2 id="Method的反射操作"><a href="#Method的反射操作" class="headerlink" title="Method的反射操作"></a>Method的反射操作</h2><p>方法的反射操作：<strong>method.invoke(对象，参数列表)</strong></p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">c</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setAge"</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法如果没有返回值返回null，有返回值的返回具体的返回值</span>Object o <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="泛型的本质（通过反射越过泛型检查）"><a href="#泛型的本质（通过反射越过泛型检查）" class="headerlink" title="泛型的本质（通过反射越过泛型检查）"></a>泛型的本质（通过反射越过泛型检查）</h2><p>首先看如下例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    list1.add(20)是错误的，因为集合的泛型是防止错误输入的，是在编译时有效，绕过编译就无效了    */</span>ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c1 == c2是true，这说明反射的操作是编译之后的操作</span>Class <span class="token class-name">c1</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">c2</span> <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此我们可以通过方法的反射来操作，绕过编译</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><strong>Java核心技术</strong></li><li><a href="https://blog.csdn.net/sinat_38259539/article/details/71799078" target="_blank" rel="noopener">敬业的小码哥的博客</a></li><li><a href="http://www.imooc.com/learn/199" target="_blank" rel="noopener">慕课网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-118.杨辉三角</title>
      <link href="/2020/02/09/leetcode-118-yang-hui-san-jiao/"/>
      <url>/2020/02/09/leetcode-118-yang-hui-san-jiao/</url>
      
        <content type="html"><![CDATA[<h1 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h1><p>给定一个非负整数$numRows$，生成杨辉三角$numRows$行。</p><p>在杨辉三角中，每个数是它左上方和右上方的数之和。</p><pre class="line-numbers language-git"><code class="language-git">输入: 5输出:[     [1],    [1,1],   [1,2,1],  [1,3,3,1], [1,4,6,4,1]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>递归的关键设计在于：</p><ul><li>递归终止条件</li><li>递归方程的描述</li><li>求解问题能够被简化为更小的规模</li></ul><p>对关于杨辉三角这个问题，通过分析我们可以得出：</p><p>对于第$numRows$行的元素，它其实是依赖于第$numRows-1$行的元素，只是它的第一个和最后一个元素为1，而其他元素为第$numRows-1$上所对应的左上方和右上方的元素之和。这样我们可以把递归关系就可以用一个循环语句来实现。其次，我们需要定义递归的出口，当$numRows=1$时，那么只需要加入1即可；对于$numRows=0$时，则不需要加入任何元素。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> dg  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//递归出口，第0层直接返回，不需要</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> dg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//递归出口,第一层时加入元素1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> dg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dg <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归numRows层数</span>        <span class="token comment" spellcheck="true">//递归实际操作</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加第一个元素1</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numRows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>dg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numRows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加最后一个元素1</span>        dg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划的关键：</p><ul><li>状态转移</li><li>状态转移方程</li><li>能够用状态转移方程自底向上求解问题</li></ul><p>对于杨辉三角这个问题，我们通过分析可以得到：</p><p>该问题的状态转移是，第$numRows$层与$numRows-1$层具有关系，每个数是它左上方和右上方的数之和。这样状态转移方程为：<br>$$<br>\begin{gather}<br>numRows[j]=numRows-1[j-1]+numRows-1[j-1] \<br>numsRows[0]=1\<br>numsRows[numsRows]=1<br>\end{gather}<br>$$</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>         List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> dp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意这里的 i 是指行数，但是dp是从0开始的</span>        <span class="token comment" spellcheck="true">//所以preRow是i-2</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> numRows<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> preRow <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>preRow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> preRow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>作者：jeromememory链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>pascals<span class="token operator">-</span>triangle<span class="token operator">/</span>solution<span class="token operator">/</span>javadi<span class="token operator">-</span>gui<span class="token operator">-</span>dong<span class="token operator">-</span>tai<span class="token operator">-</span>gui<span class="token operator">-</span>hua<span class="token operator">-</span>by<span class="token operator">-</span>jeromememory<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>给定一个非负索引 <em>k</em>，其中 <em>k</em> ≤ 33，返回杨辉三角的第 <em>k</em> 行。</p><pre class="line-numbers language-git"><code class="language-git">输入: 3输出: [1,3,3,1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>1.直接在杨辉三角的递归算法上面添加静态方法进行封装即可，调用<em>generate()</em>即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getRow</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> dg <span class="token operator">=</span>  <span class="token function">generate</span><span class="token punctuation">(</span>rowIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rowIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">int</span> numRows<span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> dg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> dg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> dg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dg  <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numRows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>dg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numRows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.可以用组合数公式。杨辉三角可以看做组合数构成</p><p><img src="0.png" alt></p><p>利用组合数的关系：$C_n^k=C_n^{k-1}*(n-k+1)/k$</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getRow</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> rowIndex<span class="token punctuation">;</span>    <span class="token keyword">long</span> pre <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> cur <span class="token operator">=</span> pre <span class="token operator">*</span> <span class="token punctuation">(</span>N <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> k<span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>作者：windliang链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>pascals<span class="token operator">-</span>triangle<span class="token operator">-</span>ii<span class="token operator">/</span>solution<span class="token operator">/</span>xiang<span class="token operator">-</span>xi<span class="token operator">-</span>tong<span class="token operator">-</span>su<span class="token operator">-</span>de<span class="token operator">-</span>si<span class="token operator">-</span>lu<span class="token operator">-</span>fen<span class="token operator">-</span>xi<span class="token operator">-</span>duo<span class="token operator">-</span>jie<span class="token operator">-</span>fa<span class="token operator">-</span>by<span class="token operator">--</span><span class="token number">28</span><span class="token operator">/</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-53.最大子序和</title>
      <link href="/2020/02/07/leetcode-53-zui-da-zi-xu-he/"/>
      <url>/2020/02/07/leetcode-53-zui-da-zi-xu-he/</url>
      
        <content type="html"><![CDATA[<h1 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h1><p>给定一个整数数组<strong>nums</strong>，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>示例</strong>：</p><pre class="line-numbers language-git"><code class="language-git">输入：[-2,1,-3,4,-1,2,1,-5,4]输出：6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h1><p>首先能够想到的是暴力求解问题，对于类似[a,b,c,d]的数组，可从a开始，遍历[a],[a,b],[a,b,c],[a,b,c,d]，记录下最大值max。然后从b开始，遍历[b],[b,c],[b,c,d]依次计算数组之和，如果得到的$sum&gt;max$,则更新max。直到遍历完数组，可以得到算法的时间复杂度是$O(n^2)$。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> sum<span class="token punctuation">)</span><span class="token punctuation">{</span>                max <span class="token operator">=</span> sum<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> sum<span class="token punctuation">)</span><span class="token punctuation">{</span>                    max <span class="token operator">=</span> sum<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新最大值</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划，通过不断分解问题，可以将复杂的任务简化为最基本的小问题。我们需要在各种可能的局部解中，找出可能达到的最优解。</p><p>关键步骤：</p><ul><li>状态转移：找到子问题之间的转移</li><li>状态转移方程：用来刻画这些状态转移的表达式</li><li>利用状态转移方程自底向上求解问题</li></ul><p>首先很容易能够想到，假设$sum[i-1]$表示前面第$i-1$个子序列之和，那么当$sum[i-1]&gt;0$时，那么更新$sum[i]=sum[i-1]+n[i]$，然后判断$sum[i]=max\{sum[i-1],sum[i]\}$，那么状态转移方程为：<br>$$<br>sum[i]=max\{sum[i-1],sum[i]\}<br>$$</p><p>此时，算法的时间复杂度为$O(n)$，空间复杂度为$O(n)$，其原因是在开辟了辅助数组，增加了复杂度，对于该算法进一步优化算法，直接在原数组上进行操作，这样空间复杂度可降低为$O(1)$。</p><p><img src="0.png" alt></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> maxSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      maxSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> maxSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>作者：LeetCode链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>maximum<span class="token operator">-</span>subarray<span class="token operator">/</span>solution<span class="token operator">/</span>zui<span class="token operator">-</span>da<span class="token operator">-</span>zi<span class="token operator">-</span>xu<span class="token operator">-</span>he<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p>贪心算法，顾名思义就是在当前的阶段最初最优的选择，但是这只是基于局部最优解的情况，同时也没有办法保证能够得到全局最优解。</p><p>对于该问题，假设对于某时刻已经确定前$i-1$个元素的最大子序列之和为$currSum$，那么对于第$i$个元素而言，此时选择<br>$$<br>currSum=max\{n[i],currSum+n[i]\}<br>$$<br>记录。并且对于每次$i$的遍历更新记录所出现的最大值$globalmax$，遍历完时，只需要返回$globalmax$值即可。</p><p><img src="2.png" alt></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> currSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      currSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> currSum <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      maxSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxSum<span class="token punctuation">,</span> currSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>作者：LeetCode链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>maximum<span class="token operator">-</span>subarray<span class="token operator">/</span>solution<span class="token operator">/</span>zui<span class="token operator">-</span>da<span class="token operator">-</span>zi<span class="token operator">-</span>xu<span class="token operator">-</span>he<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2020/02/06/wang-luo-bian-cheng/"/>
      <url>/2020/02/06/wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p>网络编程（<strong>Computer network programming</strong>）是指计算机网络编程涉及编写使程序能够跨计算机网络相互通信的计算机程序。</p><p>三要素：</p><ul><li>协议</li><li><strong>IP</strong>地址</li><li>端口号</li></ul><hr><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>计算机使多台计算机实现连接通信，其连接和通行时需要遵守一定的规则。它对数据的传输格式、传输速率、传输步骤做了统一的规定，定义了实现的标准。</p><p><img src="tcp_ip.jpg" alt></p><p><code>java.net</code>包下提供了两种常见的网络协议：</p><ul><li><p><strong>TCP/IP</strong>: 传输控制协议/因特网互联协议( <strong>Transmission Control Protocol/Internet Protocol</strong>)，是<strong>Internet</strong>最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</p></li><li><p><strong>UDP</strong>:用户数据报协议(<strong>User Datagram Protocol</strong>)。<strong>UDP</strong>是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</p></li></ul><hr><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p><strong>IP</strong>地址是指互联网协议地址（<strong>Internet Protocol Address</strong>），<strong>IP</strong>地址用来个网络中的计算机设备做唯一的编号。</p><p><strong>IP地址分类</strong></p><ul><li><strong>IPv4</strong>，是一个32位的二进制数，通常被分为4个字节。2019年11 月 25 日，全球五大区域互联网注册管理机构之一的欧洲网络协调中心（<strong>RIPE NCC</strong>）宣布 <strong>IPv4</strong> 地址已全部用完。</li><li><strong>IPv6</strong>，采用128位地址长度，每16个字节一组，分成8组十六进制数。</li></ul><hr><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>网络的通信本质是两个进程进行通信，使用<strong>IP</strong>地址可以唯一标识网络中的设备，而<strong>端口号</strong>就可以唯一标识设备中的进程。</p><p>端口号，是用两个字节表示的整数，它的取值范围为0<del>65535。其中，0</del>1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</p><p>利用<code>协议</code>+<code>IP地址</code>+<code>端口号</code> 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</p><hr><h1 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h1><p>套接字使用<strong>TCP</strong>提供了两台计算机之间的通信机制。 客户端程序创建一个套接字，并尝试连接服务器的套接字。</p><p>当连接建立时，服务器会创建一个<strong>Socket</strong> 对象。客户端和服务器现在可以通过对 <em><em>Socket </em></em>对象的写入和读取来进行通信。</p><p><code>java.net.Socket</code> 类代表一个套接字，并且 <code>java.net.ServerSocket</code> 类为服务器程序提供了一种来监听客户端，并与他们建立连接的机制。</p><p>以下步骤在两台计算机之间使用套接字建立<strong>TCP</strong>连接时会出现：</p><ul><li>服务器实例化一个<strong>SeverSocket</strong>对象，通过服务器上的端口通信</li><li>服务器调用<strong>ServerSocket</strong>类的<strong>accept（）</strong>方法，该方法一直监听端口，直到客服端连接上服务器指定的端口</li><li>服务器监听时，客户端实例化一个<strong>Socket</strong>对象，指定服务器名称和端口号来请求连接</li><li><strong>Socket</strong>类的构造函数试图将客服端连接到指定的服务器和端口号</li><li>在服务器端，<strong>accept（）</strong>方法返回服务器上一个新的<strong>Socket</strong>引用，该<strong>Socket</strong>连接到客服端的<strong>Socket</strong></li></ul><hr><h2 id="TCP通信"><a href="#TCP通信" class="headerlink" title="TCP通信"></a>TCP通信</h2><ul><li>客户端：<code>java.net.Socket</code> 类表示。创建<code>Socket</code>对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。</li><li>服务端：<code>java.net.ServerSocket</code> 类表示。创建<code>ServerSocket</code>对象，相当于开启一个服务，并等待客户端的连接。</li></ul><p><img src="%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%A1.jpg" alt></p><ul><li>1.服务器启动，创建<strong>ServerSocket</strong>对象，等待连接</li><li>2.客户端启动，创建<strong>Socket</strong>对象，请求连接</li><li>3.服务器接收连接，调用<strong>accept</strong>方法，返回一个<strong>Socket</strong>对象</li><li>4.客户端<strong>Socket</strong>对象，获取<strong>OutputStream</strong>，向服务器写出数据</li><li>5.服务器<strong>Socket</strong>对象，获取<strong>InputStream</strong>，读取客户端发送的数据</li><li>6.服务器<strong>Socket</strong>对象，获取<strong>OutputStream</strong>，向客户端回写数据</li><li>7.客户端<strong>Socket</strong>对象，获取<strong>InputStream</strong>，解析回写数据</li><li>8.客户端释放资源，断开连接</li></ul><hr><h2 id="客户端向服务器发送数据"><a href="#客户端向服务器发送数据" class="headerlink" title="客户端向服务器发送数据"></a>客户端向服务器发送数据</h2><p><strong>客户端实现</strong>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerTCP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端启动 , 等待连接 .... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.创建 ServerSocket对象，绑定端口，开始等待连接</span>        ServerSocket ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.接收连接 accept 方法, 返回 socket 对象.</span>        Socket server <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.通过socket 获取输入流</span>        InputStream is <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.一次性读取数据</span>          <span class="token comment" spellcheck="true">// 4.1 创建字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 4.2 据读取到字节数组中.</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>；        <span class="token comment" spellcheck="true">// 4.3 解析数组,打印字符串信息</span>        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.关闭资源.</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端实现</strong>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientTCP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端发送数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.创建 Socket (ip,port),确定连接到哪里.</span>        Socket client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.获取流对象 . 输出流</span>        OutputStream os <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.写出数据.</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"请求tcp"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 关闭资源 .</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="服务器向客户端回写数据"><a href="#服务器向客户端回写数据" class="headerlink" title="服务器向客户端回写数据"></a>服务器向客户端回写数据</h2><p><strong>服务端实现：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerTCP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端启动,等待连接 ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.创建 ServerSocket对象，绑定端口，开始等待连接</span>        ServerSocket ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.接收连接 accept 方法, 返回 socket 对象.</span>        Socket server <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.通过socket 获取输入流</span>        InputStream is <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.一次性读取数据</span>          <span class="token comment" spellcheck="true">// 4.1 创建字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 4.2 据读取到字节数组中.</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>；        <span class="token comment" spellcheck="true">// 4.3 解析数组,打印字符串信息</span>        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// =================回写数据=======================</span>          <span class="token comment" spellcheck="true">// 5. 通过 socket 获取输出流</span>           OutputStream out <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 6. 回写数据</span>           out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"谢谢你"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 7.关闭资源.</span>          out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端实现：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientTCP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端 发送数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.创建 Socket ( ip , port ) , 确定连接到哪里.</span>        Socket client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.通过Scoket,获取输出流对象 </span>        OutputStream os <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.写出数据.</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"tcp我来了"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// ==============解析回写=========================</span>          <span class="token comment" spellcheck="true">// 4. 通过Scoket,获取 输入流对象</span>          InputStream in <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 5. 读取数据数据</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6. 关闭资源 .</span>          in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Socket类"><a href="#Socket类" class="headerlink" title="Socket类"></a>Socket类</h2><ul><li><strong>public Socket(String host, int port)</strong> :创建套接字对象并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。  </li><li><strong>public InputStream getInputStream()</strong>：返回此套接字的输入流。</li><li><strong>public OutputStream getOutputStream()</strong>:返回此套接字的输出流。</li><li><strong>public void close()</strong>:关闭此套接字</li><li><strong>public void shutdownOutput</strong>:禁用此套接字的输出流</li></ul><hr><h2 id="ServerSocket类"><a href="#ServerSocket类" class="headerlink" title="ServerSocket类"></a>ServerSocket类</h2><ul><li><strong>public ServerSocket(int port)</strong>:使用该构造方法在创建ServerSocket对象时，就可以将其绑定到一个指定的端口号上，参数port就是端口号。</li><li><strong>public Socket accept()</strong>:侦听并接受连接，返回一个新的Socket对象，用于和客户端实现通信。该方法会一直阻塞直到建立连接。 </li></ul><hr><h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h2 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h2><p><strong>IP</strong>地址类：<strong>InetAddress</strong>类</p><blockquote><p><strong>InetAddress</strong>类没有构造方法</p></blockquote><ul><li><strong>byte[] getAddress()</strong>：返回此<strong>INetAddress</strong> 对象的原始<strong>IP</strong>地址</li><li><strong>static InetAddress getByName(String host)</strong>：在给定主机名的情况下确定主机的<strong>IP</strong>地址</li><li><strong>String getHostAddress()</strong>:返回<strong>IP</strong>地址字符串</li><li><strong>String getHostName()</strong>：获取此<strong>IP</strong>地址的主机名</li><li><strong>static InetAddress getLocalHost()</strong>：返回本地主机</li></ul><blockquote><p>127.0.01:本机地址，用于测试</p></blockquote><hr><h2 id="InetSocketAddress类"><a href="#InetSocketAddress类" class="headerlink" title="InetSocketAddress类"></a>InetSocketAddress类</h2><p>端口类：<strong>InetSocketAddress</strong>类</p><ul><li><strong>InetSocketAddress（InetAddress addr, int port)</strong>:根据<strong>IP</strong>地址和端口号创建套接字地址</li><li><strong>InetSocketAddress（int port)</strong>:创建套接字地址，其中<strong>IP</strong>地址为通配符，端口号为指定值</li><li><strong>InetSocketAddress(String hostname, int port)</strong>:根据主机名和端口号创建套接字地址</li><li><strong>InetAddress getAddress（）</strong>:获取<strong>InetAddress</strong></li><li><strong>String getHostName()</strong>:获取<strong>hostname</strong></li><li><strong>int getPort()</strong>:获取端口号</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 套接字 </tag>
            
            <tag> C/S </tag>
            
            <tag> TCP/IP </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git三剑客</title>
      <link href="/2020/02/02/git/"/>
      <url>/2020/02/02/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><strong>Git</strong>作为世界上最新进的分布式版本控制系统，用于高效处理任何项目。</p><hr><h2 id="配置user信息"><a href="#配置user信息" class="headerlink" title="配置user信息"></a>配置user信息</h2><ul><li>$ git config –global user.name “your_name”</li><li>$ git config –global user.email “<a href="mailto:your_email@domain.com" target="_blank" rel="noopener">your_email@domain.com</a>“</li></ul><blockquote><p>config的三个作用域</p><ul><li>git config –local （只对某个仓库有效）</li><li>git config –global （对当前用户所有仓库有效）</li><li>git config –system（对系统所有登录用户有效）</li></ul><p>显示config的配置，加  –list</p><p>git config –list –XXX</p></blockquote><hr><h2 id="建Git仓库"><a href="#建Git仓库" class="headerlink" title="建Git仓库"></a>建Git仓库</h2><p>两种场景：</p><p>1.把已有的项目代码纳入<strong>Git</strong>管理</p><pre class="line-numbers language-git"><code class="language-git">$ cd 项目代码所在文件夹<span class="token command">$ git init</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.新建的项目直接用<strong>Git</strong>管理</p><pre class="line-numbers language-git"><code class="language-git">$ cd 某个文件夹<span class="token command">$ git init your_project  #会在当前路径下创建和项目名称相同的文件夹</span>$ cd your_project<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>当设置global参数后，再设置local参数，local的优先级更高</p></blockquote><h2 id="往仓库里添加文件以及常用命令"><a href="#往仓库里添加文件以及常用命令" class="headerlink" title="往仓库里添加文件以及常用命令"></a>往仓库里添加文件以及常用命令</h2><p><img src="0.png" alt></p><pre class="line-numbers language-git"><code class="language-git">Git常用命令<span class="token command">$ git add xxx #把xxx添加到仓库</span><span class="token command">$ git commit<span class="token parameter"> -m</span> </span><span class="token string">"xxx"</span> #把文件提交到仓库，xxx表示此次提交的信息<span class="token command">$ git status #查看仓库当前状态</span><span class="token command">$ git diff xxx #查看xxx修改内容</span><span class="token command">$ git log #显示提交的日志</span><span class="token command">$ git log<span class="token parameter"> --oneline</span> #查看简洁方式<span class="token parameter"> --n4</span> #所有分支最近4个<span class="token parameter"> --graph</span> #图形化</span><span class="token command">$ git reflog #查看命令历史</span><span class="token command">$ git reset<span class="token parameter"> --hard</span> commit_id #回退到某个版本</span><span class="token command">$ git mv xxx xxx.md #把xxx变更xxx.md文件名</span>$ gitk #图形界面查看版本历史<span class="token command">$ git checkout #切换分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="commit，tree和blob三个对象之间的关系"><a href="#commit，tree和blob三个对象之间的关系" class="headerlink" title="commit，tree和blob三个对象之间的关系"></a>commit，tree和blob三个对象之间的关系</h2><p>在<strong>Git</strong>中根据哈希值，像commit—&gt;tree—&gt;blob这样的树形结构连接起来。</p><p><strong>Git</strong>中不会因为文件名不同而创建不同的<strong>blob</strong>文件，而是根据哈希值来确定<strong>blob</strong>文件，这样就大大节省了<strong>Git</strong>仓库的空间大小。</p><hr><h2 id="分离头指针"><a href="#分离头指针" class="headerlink" title="分离头指针"></a>分离头指针</h2><p>如果进行了某些更改，而且十分重要，一定要和某个分支绑定在一起，<strong>Git</strong>才不会把它作为垃圾处理。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA并发实现和线程安全</title>
      <link href="/2020/02/02/java-bing-fa-shi-xian-he-xian-cheng-an-quan/"/>
      <url>/2020/02/02/java-bing-fa-shi-xian-he-xian-cheng-an-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>线程（<strong>Thread</strong>），通常是指每一个任务。多线程就是指可以同时运行一个以上线程的程序。多线程执行时，在栈内存中，每一个执行的线程都有一片自己的栈内存空间。进行方法的压栈、弹栈。</p><hr><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><ul><li><strong>New</strong>（新创建）</li><li><strong>Runnable</strong>（可运行）</li><li><strong>Blocked</strong>（被阻塞）</li><li><strong>Waiting</strong>（等待）</li><li><strong>Timed waiting</strong>（计时等待）</li><li><strong>Terminated</strong>（被终止）</li></ul><h3 id="1-线程创建"><a href="#1-线程创建" class="headerlink" title="1.线程创建"></a>1.线程创建</h3><h4 id="1-1Thread类实现"><a href="#1-1Thread类实现" class="headerlink" title="1.1Thread类实现"></a>1.1Thread类实现</h4><p><strong>JAVA</strong>中使用<code>java.lang.Thread</code>类代表线程，所有的线程对象必须是<strong>Thread</strong>类或者其子类的实例。</p><p>创建多线程步骤：</p><ul><li>1.定义<strong>Thread</strong>类的子类，重写<strong>run</strong>方法（线程执行体）</li><li>2.创建<strong>Thread</strong>子类的实例，可运用多态来创建线程对象</li><li>3.调用线程对象的<strong>start</strong>（）来启动线程</li></ul><blockquote><p>注意：</p><p>应该是调用start（）方法，而不是run（）方法。</p><p>如果调用的是run（）方法，那么只会在main方法的栈空间运行run（）中的代码，而不会开辟新的栈空间。这就不是多线程</p></blockquote><p><code>java.lang.Thread</code>类<strong>API</strong>中的一些方法：</p><p><strong>构造方法</strong>：</p><ul><li><code>public Thread()</code>:分配一个新的线程对象</li><li><code>public Thread(String name)</code>:分配一个指定参数名的线程对象</li><li><code>public Thread(Runnable target)</code>:分配一个带有指定目标新的线程对象</li><li><code>public Thread(Runnable target,String name)</code>:分配一个带有指定目标新的线程对象并指定参数名</li></ul><p><strong>常用方法</strong>：</p><ul><li><code>public String getName()</code>:获取当前线程名称</li><li><code>public void start()</code>:让此线程开始执行，<strong>JVM</strong>调用<strong>run（）</strong>方法</li><li><code>public void run()</code>：此线程要执行的任务代码</li><li><code>public static void sleep(long millis)</code>:使当前正在执行的线程暂停多少毫秒再执行</li><li><code>public static Thread currentThread()</code>:返回当前正在执行的线程对象的引用</li></ul><hr><h4 id="1-2Runnable接口实现"><a href="#1-2Runnable接口实现" class="headerlink" title="1.2Runnable接口实现"></a>1.2Runnable接口实现</h4><p>采用<code>java.lang.Runnable</code>接口，重写<strong>run（）</strong>方法</p><p>创建多线程步骤：</p><ul><li>1.定义<strong>Runnable</strong>接口的实现类，重写<strong>run（）</strong>方法</li><li>2.创建<strong>Runnable</strong>实现类的实例，并以实例作为<strong>Thread</strong>的<strong>target</strong>来穿件<strong>Thread</strong>对象，该<strong>Thread</strong>对象才是真正的线程对象</li><li>调用线程对象的<strong>start（）</strong>方法来启动线程</li></ul><hr><h4 id="1-3Thread和Runnable区别"><a href="#1-3Thread和Runnable区别" class="headerlink" title="1.3Thread和Runnable区别"></a>1.3Thread和Runnable区别</h4><ul><li>使用<strong>Thread</strong>继承方法实现多线程不适合资源贡献</li><li><strong>Runnable</strong>接口比<strong>Thread</strong>继承更有优势<ul><li>适合多个相同的程序代码的线程去共享一个资源</li><li>避免<strong>JAVA</strong>中单继承局限性</li><li>有利于程序解耦，实现设置线程任务和开启线程分离</li><li>线程池只能放入<strong>Runnable</strong>或<strong>Callable</strong>类线程，不能直接放入继承<strong>Thread</strong>类</li></ul></li></ul><blockquote><p>注意：</p><p>在JAVA中，每次程序运行至少启动两个线程。一个是main线程，一个是垃圾收集线程。</p></blockquote><h4 id="1-4匿名内部类实现线程创建"><a href="#1-4匿名内部类实现线程创建" class="headerlink" title="1.4匿名内部类实现线程创建"></a>1.4匿名内部类实现线程创建</h4><p>使用匿名内部类方式，可以方便实现每个线程任务操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    Runnable是函数式接口，可以使用lambda表达式建立一个实例    格式：        Runnable r = ()->{ code }*/</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        执行代码    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token number">2</span><span class="token punctuation">.</span>Runnable r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        执行代码    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行线程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-线程安全"><a href="#2-线程安全" class="headerlink" title="2.线程安全"></a>2.线程安全</h3><p>线程安全是由全局变量和静态变量引起，涉及到程序中共享资源的操作</p><p><strong>线程同步机制</strong></p><p><strong>JAVA</strong>中线程同步机制：</p><ul><li>同步代码块</li><li>同步方法</li><li>锁机制</li></ul><p><strong>JAVA</strong>中同步机制<code>synchronized</code>关键字</p><hr><h4 id="2-1同步代码块"><a href="#2-1同步代码块" class="headerlink" title="2.1同步代码块"></a>2.1同步代码块</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步锁<span class="token punctuation">)</span><span class="token punctuation">{</span>    同步操作代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>对象的同步锁是在对象上标记了一个锁</p><ul><li>1.锁对象可以是任意类型</li><li>2.多个线程对象要使用对一把锁，哪个线程拿到了锁就进入<strong>Runnable</strong>状态，没有得到锁的线程进入<strong>Blocked</strong>状态</li></ul></blockquote><hr><h4 id="2-2同步方法"><a href="#2-2同步方法" class="headerlink" title="2.2同步方法"></a>2.2同步方法</h4><p>同步方法是指，<code>synchronized</code>修饰的方法，保证只有一个线程使用同步方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    执行代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ul><li>1.对于非<strong>static</strong>方法，同步锁就是<strong>this</strong></li><li>2.对于<strong>static</strong>方法，同步锁就是当前当前方法所在来的字节码对象（类名.class)反射机制</li></ul></blockquote><hr><h4 id="2-3Lock锁"><a href="#2-3Lock锁" class="headerlink" title="2.3Lock锁"></a>2.3Lock锁</h4><p><code>ReentrantLock</code>类继承自<code>Lock</code>类，显式就行加锁。</p><pre class="line-numbers language-java"><code class="language-java">Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//多态</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//加同步锁</span>    执行代码    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//释放同步锁</span>    <span class="token comment" spellcheck="true">/*        这里可以采用异常处理机制        lock.lock();        try{        执行代码        }finally{        lock.unlock();}    */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ul><li>1.如果使用锁，就不能使用带资源的<strong>try</strong>语句</li><li>2.把解锁操作放在<strong>finally</strong>中至关重要。如果在临界区中的代码抛出异常，锁必须被释放。否则，其他线程将永远被阻塞</li></ul></blockquote><hr><h1 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h1><p>等待唤醒机制是多线程一种协作机制，用来合理调度资源。</p><p>等待唤醒的方法：</p><ul><li><strong>wait</strong>：线程停止活动，不再参与调度，进入<strong>wait set</strong></li><li><strong>notify</strong>： 选取通知对象中的<strong>wait set</strong>中的一个线程进行释放</li><li><strong>notify</strong>：释放通知对象的<strong>wait set</strong>中的全部线程</li></ul><blockquote><p>注意：</p><ul><li><strong>wait</strong>方法与<strong>notify</strong>方法必要由同一个锁对象调用</li><li><strong>wait</strong>方法与<strong>notify</strong>方法属于<strong>Object</strong>类的方法</li><li><strong>wait</strong>方法与<strong>notify</strong>方法必要在同步代码块或者同步函数中使用</li></ul></blockquote><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《<strong>JAVA</strong>核心技术》</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 线程 </tag>
            
            <tag> 同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Exception和Error</title>
      <link href="/2020/02/01/qian-xi-exception-he-error/"/>
      <url>/2020/02/01/qian-xi-exception-he-error/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA异常层次结构"><a href="#JAVA异常层次结构" class="headerlink" title="JAVA异常层次结构"></a>JAVA异常层次结构</h1><p><code>JAVA</code>中所有异常都是由<code>Throwable</code>继承而来，异常层次结构可从<code>Throwable</code>超类向下分为<code>Exception</code>,<code>Error</code>两个子类。</p><p><img src="0.png" alt></p><hr><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p><code>Exception</code>是程序正常运行中，可以预料的意外情况，可能并且应该被捕获，进行相应的处理。该层次结构分解为两个分支<code>IOException</code>,<code>RuntimeException</code>。划分这两个层次的规则是：由程序错误导致的异常属于<code>RuntimeException</code>;而程序本身没有问题，但由于像I/O错误这类问题导致的异常就属于<code>IOException</code>。</p><p><code>RuntimeException</code>的异常通常包含以下方面：</p><ul><li><code>ClassCastException</code></li><li><code>NullPointerException</code></li><li><code>ArrayIndexOutOfBoundsException</code></li><li><code>SecurityException</code></li></ul><p><code>IOException</code>的异常通常包含：</p><ul><li><code>Checked Exception</code>，就是必须显式地进行捕获处理，这是编译器检查的一部分。</li><li>试图在文件的尾部读取数据</li><li>试图打开一个不存在的文件</li><li>试图根据给定的字符串查找Class对象，而这个字符串表示的类并不存在</li></ul><hr><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p><code>Error</code>类层次结构描述了<code>JAVA</code>运行时系统内部错误和资源耗尽错误。绝大部分的<code>Error</code>都会导致程序（比如<code>JVM</code>自身）处于非正常的、不可恢复状态。常见比如：</p><ul><li><code>OutOfMemoryError</code></li><li><code>NoClassDefFoundError</code></li></ul><hr><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p><code>java</code>异常处理五个关键字：<strong>try、catch、finally、throw、throws</strong></p><h3 id="1-抛出异常throw"><a href="#1-抛出异常throw" class="headerlink" title="1.抛出异常throw"></a>1.抛出异常throw</h3><p><strong>throw</strong>：用来抛出一个指定的异常对象。<strong>throw</strong>用在方法中，用来抛出一个异常对象，将这个异常对象传递到调用者出，并结束当前方法的执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">throw</span> <span class="token keyword">new</span> 异常类名（参数）：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ul><li>1.<strong>throw</strong>关键字必须写在方法的内部</li><li>2.<strong>throw</strong>关键字后边<strong>new</strong>的对象必须是<strong>Exception</strong>或者<strong>Exception</strong>的子类对象</li><li>3.<strong>throw</strong>关键字抛出指定的异常对象，就必须处理这个异常对象<ul><li><strong>throw</strong>关键字后边创建的是<strong>RuntimeException</strong>或者是<strong>RuntimeException</strong>子类对象，可以不处理，默认交给<strong>JVM</strong>处理（打印异常对象，中断程序）</li><li><strong>throw</strong>关键字后边创建的是编译异常，必须使用throws或者try…catch处理</li></ul></li></ul><hr><h3 id="2-声明异常throws"><a href="#2-声明异常throws" class="headerlink" title="2.声明异常throws"></a>2.声明异常throws</h3><p><strong>throws</strong>会把异常对象声明抛出给方法的调用者处理</p><pre class="line-numbers language-java"><code class="language-java">修饰符 返回值类型 方法名（参数列表） <span class="token keyword">throws</span> AException，BException<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AException</span><span class="token punctuation">(</span><span class="token string">"原因1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BException</span><span class="token punctuation">(</span><span class="token string">"原因2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>1.<strong>throws</strong>关键字必须写在方法声明处</li><li>2.<strong>throws</strong>关键字后边声明的异常必须是Exception或者是Exception的子类</li><li>3.方法内部如果抛出了多个异常对象，那么throws后边也必须声明多个异常<ul><li>如果抛出的多个异常对象有子父类关系，直接声明父类对象</li></ul></li><li>4.调用了一个声明抛出异常的方法，就必须处理声明的异常<ul><li>要么继续使用throws声明抛出，交给方法的调用者处理，最终交给JVM</li><li>要么try…catch自己处理异常</li></ul></li></ul><hr><h3 id="3-try…catch"><a href="#3-try…catch" class="headerlink" title="3.try…catch"></a>3.try…catch</h3><p>捕获异常可设置<code>try/catch</code>语句</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    如果在try语句块中的代码没有抛出任何异常，那么程序将跳过catch字句*/</span><span class="token keyword">try</span><span class="token punctuation">{</span>    编写可能会出现异常的代码<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 e<span class="token punctuation">)</span><span class="token punctuation">{</span>    处理异常<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>1.<strong>try</strong>中可能会抛出多个异常对象，那么就可以使用多个<strong>catch</strong>来处理这些异常</li><li>2.如果<strong>try</strong>中产生了异常，那么就会执行catch中的异常处理语句，执行完毕后继续下面的代码；如果<strong>try</strong>中没有产生异常，那么就不会执行catch中处理异常的语句，继续执行<strong>try…catch</strong>之后的代码</li></ul><p>如何获取异常信息：</p><p><strong>Throwable</strong>类中定义了一些查看方法:</p><ul><li><code>public String getMessage()</code>:获取异常的描述信息,原因(提示给用户的时候,就提示错误原因。</li></ul><ul><li><code>public String toString()</code>:获取异常的类型和异常描述信息(不用)。</li><li><code>public void printStackTrace()</code>:打印异常的跟踪栈信息并输出到控制台。</li></ul><hr><h3 id="4-finally"><a href="#4-finally" class="headerlink" title="4.finally"></a>4.finally</h3><p><strong>finally</strong>：有一些代码无论异常是否发生，都需要执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    执行代码<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{</span>    处理异常<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    无论程序怎样，最终执行代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>主要在<strong>finally</strong>中处理<strong>return</strong>语句</li><li>慎用<strong>return，break，continue</strong></li><li>对于引用类型返回，要特别小心。如果在<strong>finally</strong>中改变了引用对象的成员属性，即使不显式地调用<strong>return</strong>语句，修改也会作用到返回值上</li></ul><h3 id="5-多异常处理"><a href="#5-多异常处理" class="headerlink" title="5.多异常处理"></a>5.多异常处理</h3><ul><li>多个异常分别处理</li><li>多个异常一次捕获，多次处理</li><li>多个异常一次捕获一次处理</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    最常用的是一次捕获多次处理方式*/</span><span class="token keyword">try</span><span class="token punctuation">{</span>     编写可能会出现异常的代码<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型A  e<span class="token punctuation">)</span><span class="token punctuation">{</span>  当<span class="token keyword">try</span>中出现A类型异常<span class="token punctuation">,</span>就用该<span class="token keyword">catch</span>来捕获<span class="token punctuation">.</span>     处理异常的代码     <span class="token comment" spellcheck="true">//记录日志/打印异常信息/继续抛出异常</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型B  e<span class="token punctuation">)</span><span class="token punctuation">{</span>  当<span class="token keyword">try</span>中出现B类型异常<span class="token punctuation">,</span>就用该<span class="token keyword">catch</span>来捕获<span class="token punctuation">.</span>     处理异常的代码     <span class="token comment" spellcheck="true">//记录日志/打印异常信息/继续抛出异常</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>运行时异常被抛出可以不处理，不捕获也不抛出</li><li>如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或者是父类异常的子类或者不抛出异常</li><li>父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出</li></ul><hr><h3 id="6-自定义异常类"><a href="#6-自定义异常类" class="headerlink" title="6.自定义异常类"></a>6.自定义异常类</h3><p>对于<strong>JAVA</strong>提供的异常类，不够使用，需要自己定义一些异常类</p><pre class="line-numbers language-java"><code class="language-java">格式：<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XXXException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token operator">/</span>RuntiimeException<span class="token punctuation">{</span>    添加一个空参数构造器    添加一个带异常信息的构造器<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>自定义异常类一般都是<strong>Exception</strong>结尾，说明该类是一个异常类</li><li>自定义异常类，必须继承<strong>Exception</strong>或者<strong>RuntimeException</strong><ul><li>继承<strong>Exception</strong>：那么自定义异常类就是一个编译期异常，如果方法内部抛出了编译期异常，就必须处理异常，<strong>throws</strong>或者<strong>try…catch</strong></li><li>继承<strong>RuntimeException</strong>：那么自定义异常类就是一个运行期异常，无需处理，交给<strong>JVM</strong>处理</li></ul></li></ul><hr><h1 id="异常机制的使用技巧"><a href="#异常机制的使用技巧" class="headerlink" title="异常机制的使用技巧"></a>异常机制的使用技巧</h1><ul><li>异常处理不能代替简单的测试</li><li>不要过分地细化异常</li><li>尽量不要捕获类似<strong>Exception</strong>这样的通用异常，而是捕获特定异常</li><li>不要生吞（swallow）异常</li><li>利用异常层次结构<ul><li>不要只抛出<strong>RuntimeException</strong>异常。应该寻找更加合适的子类或创建自己的异常类</li><li>不要只捕获<strong>Thowable</strong>异常，否则会使程序代码更难维护</li></ul></li><li>早抛出，晚捕获</li></ul><hr><h1 id="性能角度分析"><a href="#性能角度分析" class="headerlink" title="性能角度分析"></a>性能角度分析</h1><ul><li><strong>try…catch</strong>代码段会产生额外的性能开销，往往会影响<strong>JVM</strong>对代码的优化，所以建议只捕获有必要的代码段</li><li>利用异常控制代码流程，效果也不是很好，通常比条件语句更加低效</li></ul><hr><h1 id="NoClassDefFoundError，ClassNotFoundException辨析"><a href="#NoClassDefFoundError，ClassNotFoundException辨析" class="headerlink" title="NoClassDefFoundError，ClassNotFoundException辨析"></a>NoClassDefFoundError，ClassNotFoundException辨析</h1><p><code>ClassNotFoundException</code>产生的原因：</p><p><strong>JAVA</strong>支持使用<strong>Class.forName</strong>方法动态加载类，任意一个类的类名如果被作为参数传递给这个方法都将导致该类被加载到<strong>JVM</strong>内存中，如果这个类在类路径中没有被找到，那么此时就会在运行时抛出<strong>ClassNotFoundException</strong>异常。</p><p><code>NoClassDefFoundError</code>产生的原因：</p><p>如果<strong>JVM</strong>或者<strong>ClassLoader</strong>实例尝试加载（可以通过正常的方法调用，也可能是使用<strong>new</strong>来创建新的对象）类的时候却找不到类的定义。要查找的类在编译的时候是存在的，运行的时候却找不到。</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p>《<strong>JAVA</strong>核心技术》</p></li><li><p><a href="https://time.geekbang.org/column/intro/82" target="_blank" rel="noopener"><strong>JAVA</strong>核心技术36讲</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA异常 </tag>
            
            <tag> 捕获异常 </tag>
            
            <tag> Throwable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年总结</title>
      <link href="/2020/01/30/2019-nian-zong-jie/"/>
      <url>/2020/01/30/2019-nian-zong-jie/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=441532&auto=1&height=66"></iframe></div><h1 id="纪念2019年流逝的时光"><a href="#纪念2019年流逝的时光" class="headerlink" title="纪念2019年流逝的时光"></a>纪念2019年流逝的时光</h1><hr><ul><li><h2 id="考研"><a href="#考研" class="headerlink" title="考研"></a>考研</h2><p>2019年经历了许多有趣、难忘的事，从大一的荒废时间，到后来终于幡然醒悟。人生就是这样兜兜转转，但是最终却要把人带回应该要走的轨迹。</p><p>这一年里，面临着考研和工作的选择，选择考研这一条毫无硝烟的战役。既是对人内心的磨炼，也是对以前所欠缺的知识进行了一场恶补。不论结果如何，都是对自己大学生涯的总结。若干年后，至少心中不会抱有遗憾。</p><p><img src="0.jpg" alt></p></li></ul><ul><li><h2 id="爱情"><a href="#爱情" class="headerlink" title="爱情"></a>爱情</h2><blockquote><p>How many loved your moments of glad grace,And loved your beauty with love false or true,But one man loved the pilgrim soul in you,And loved the sorrows of your changing face.</p></blockquote><p>18年4年，遇见了她。是偶然，也是必然。我相信人生你注定要遇见的，经历的，是你逃不掉，最终必然注定的。她像一团光，那么耀眼，能够将我轻易融化。从最初表白失败到最后在一起，中间的过程是那么曲折。但是，很高兴我找到能够相伴一生的人。</p><p><img src="1.jpg" alt></p><hr></li></ul><ul><li><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><blockquote><p>时至今日你仍是我是我心中的光。——《非自然死亡》 </p></blockquote><p>未来仍将努力前行。</p><p><img src="2.jpg" alt></p><hr></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爱情 </tag>
            
            <tag> 考研 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
