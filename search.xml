<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MyBatis小记</title>
      <link href="/2020/02/19/mybatis-xiao-ji/"/>
      <url>/2020/02/19/mybatis-xiao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis小记"><a href="#MyBatis小记" class="headerlink" title="MyBatis小记"></a><strong>MyBatis</strong>小记</h1><h2 id="1-MyBatis初见"><a href="#1-MyBatis初见" class="headerlink" title="1.MyBatis初见"></a>1.MyBatis初见</h2><p><strong>MyBatis</strong>是持久层框架，使用<strong>XML</strong>将<strong>SQL</strong>与程序解耦，便于维护。</p><p><strong>MyBatis</strong>执行高效，是<strong>JDBC</strong>的延伸。<a href="https://mybatis.org/mybatis-3/zh/configuration.html" target="_blank" rel="noopener">官方文档</a></p><p><strong>MyBatis</strong>开发流程：</p><ul><li>引入<strong>MyBatis</strong>依赖</li><li>创建核心配置文件</li><li>创建实体（Entity）类</li><li>创建<strong>Mapper</strong>映射文件</li><li>初始化<strong>SessionFactory</strong></li><li>利用<strong>SqlSession</strong>对象操作数据</li></ul><h2 id="2-MyBatis环境配置"><a href="#2-MyBatis环境配置" class="headerlink" title="2.MyBatis环境配置"></a>2.MyBatis环境配置</h2><ul><li><strong>MyBatis</strong>采用<strong>XML</strong>格式配置数据库环境信息</li><li><strong>MyBatis</strong>环境配置标签<environment></environment></li><li><strong>environment</strong>包换数据库驱动，url，用户名，密码</li></ul><p><img src="0.png" alt> </p><p>首先创建<strong>Maven</strong>项目，配置<strong>pom.xml</strong>里面相关的依赖，链接<strong>MySQL</strong></p><p><img src="1.png" alt></p><p><img src="2.png" alt></p><p>在<strong>resources</strong>目录下建立<strong>mybatis-config.xml</strong>文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--设置默认指向的数据库--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置环境，不同的环境不同的id名字--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 采用JDBC方式对数据库事务进行commit/rollback --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--采用连接池方式管理数据库连接--></span>            <span class="token comment" spellcheck="true">&lt;!--&lt;dataSource type="POOLED">--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.imooc.mybatis.datasource.C3P0DataSourceFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/babytun?useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!--...--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 采用JDBC方式对数据库事务进行commit/rollback --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--采用连接池方式管理数据库连接--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://192.168.1.155:3306/babytun?useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mappers/goods.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mappers/goods_detail.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-SqlSessionFactory"><a href="#3-SqlSessionFactory" class="headerlink" title="3.SqlSessionFactory"></a>3.SqlSessionFactory</h2><p><strong>SqlSessionFactory</strong>是<strong>MyBatis</strong>的核心对象，用于初始化<strong>MyBatis</strong>，创建<strong>SqlSession</strong>对象，全局唯一</p><p><strong>SqlSession</strong>是<strong>MyBatis</strong>操作数据库的核心对象，使用<strong>JDBC</strong>方式与数据库交互。<strong>SqlSession</strong>对象提供了数据表<strong>CRUD</strong>对应方法</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 初始化SqlSessionFactory     * @throws IOException     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//利用Reader加载classpath下的mybatis-config.xml核心配置文件</span>        Reader reader <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsReader</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化SqlSessionFactory对象,同时解析mybatis-config.xml文件</span>        SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SessionFactory加载成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSession sqlSession <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建SqlSession对象,SqlSession是JDBC的扩展类,用于与数据库交互</span>            sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建数据库连接(测试用)</span>            Connection connection <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sqlSession <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果type="POOLED",代表使用连接池,close则是将连接回收到连接池中</span>                <span class="token comment" spellcheck="true">//如果type="UNPOOLED",代表直连,close则会调用Connection.close()方法关闭连接</span>                sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="4-初始化工具类MyBatisUtils"><a href="#4-初始化工具类MyBatisUtils" class="headerlink" title="4.初始化工具类MyBatisUtils"></a>4.初始化工具类MyBatisUtils</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Reader<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * MyBatisUtils工具类,创建全局唯一的SqlSessionFactory对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//利用static(静态)属于类不属于对象,且全局唯一</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//利用静态块在初始化类时实例化sqlSessionFactory</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        Reader reader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            reader <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsReader</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//初始化错误时,通过抛出异常ExceptionInInitializerError通知调用者</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionInInitializerError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * openSession 创建一个新的SqlSession对象     * @return SqlSession对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//默认SqlSession对自动提交事务数据(commit)</span>        <span class="token comment" spellcheck="true">//设置false代表关闭自动提交,改为手动提交事务数据</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 释放一个有效的SqlSession对象     * @param session 准备释放SqlSession对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeSession</span><span class="token punctuation">(</span>SqlSession session<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>session <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="5-MyBatis数据查询"><a href="#5-MyBatis数据查询" class="headerlink" title="5.MyBatis数据查询"></a>5.MyBatis数据查询</h2><p><strong>MyBatis</strong>数据查询步骤:</p><ul><li>创建实体类（Entity）</li><li>创建Mapper XML</li><li>编写<select>SQL标签</select></li><li>开启驼峰命名映射</li><li>新增<mapper></mapper></li><li>SqlSession执行select语句</li></ul>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC笔记</title>
      <link href="/2020/02/18/jdbc-bi-ji/"/>
      <url>/2020/02/18/jdbc-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC学习笔记"><a href="#JDBC学习笔记" class="headerlink" title="JDBC学习笔记"></a>JDBC学习笔记</h1><p><strong>JDBC</strong>全称为<strong>Java数据库连接（Java DataBase Connectiovity）</strong></p><p><img src="0.png" alt></p><h2 id="1-DriverManager"><a href="#1-DriverManager" class="headerlink" title="1.DriverManager"></a>1.DriverManager</h2><p><code>DriverManager</code>注册驱动类</p><p>主要作用：</p><ul><li><p>注册驱动</p><ul><li><p><code>DriverManager.registerDriver(new Driver())</code>;(会导致驱动注册两次)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Driver源码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Driver</span> <span class="token keyword">extends</span> <span class="token class-name">NonRegisteringDriver</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Driver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> var1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li>实际开发中注册驱动使用:通过反射，<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>;</li></ul><ul><li><p>获得连接</p><ul><li><code>Connection getConnection(String url,String username,String password)</code>;</li><li><code>url:jdbc:mysql://localhost:3306/jdbc</code><ul><li><code>jdbc</code>:协议</li><li><code>mysql</code>:子协议</li><li><code>localhost</code>:主机名</li><li>3306:端口号</li><li>简写:<code>jdbc:mysql:///jdbc</code></li></ul></li></ul></li></ul><blockquote><p>这里有个坑，是连接时的编码问题。需要在url后面加上?<code>useUnicode=true&amp;characterEncoding=utf8</code></p></blockquote><hr><h2 id="2-Connection"><a href="#2-Connection" class="headerlink" title="2.Connection"></a>2.Connection</h2><p><code>Connection</code>连接对象</p><p>主要作用:</p><p>创建执行SQL语句的对象</p><ul><li><code>Statement createStatement()</code>: 执行SQL语句，有SQL注入的漏洞存在</li><li><code>PreparedStatement prepareStatement(String sql)</code>: 预编译SQL语句，解决SQL注入的漏洞</li><li><code>CallableStatement prepareCall(String sql)</code>: 执行SQL中储存过程</li></ul><p>进行事务管理</p><ul><li><code>setAutoCommit(boolean autoCommit)</code>: 设置事务是否自动提交</li><li><code>commit()</code>: 事务提交</li><li><code>rollback()</code>: 事务回滚</li></ul><hr><h2 id="3-Statement"><a href="#3-Statement" class="headerlink" title="3.Statement"></a>3.Statement</h2><p>主要作用:</p><p>执行SQL语句</p><ul><li><code>boolean execute(String sql)</code>: 执行SQL，执行select语句返回true，否则返回false</li><li><code>ResultSet executeQuery(String sql)</code>: 执行SQL中的select语句</li><li><code>int executeUpdate(String sql)</code>: 执行SQL中的insert/delete语句</li></ul><p>执行批处理操作</p><ul><li><code>addBatch(String sql)</code> : 添加到批处理</li><li><code>executeBatch()</code>: 执行批处理</li><li><code>clearBatch()</code>: 清空批处理</li></ul><hr><h2 id="4-ResultSet"><a href="#4-ResultSet" class="headerlink" title="4.ResultSet"></a>4.ResultSet</h2><p><code>ResultSet</code>结果集，查询结果（select）语句查询结果的封装</p><p>主要作用: 结果集获取查询到的结果</p><ul><li><code>next()</code></li><li>针对不同类型数据采用不同的<code>getxxx()</code>方法，通用的获取方法为<code>getObject()</code></li></ul><hr><h2 id="5-CRUD操作"><a href="#5-CRUD操作" class="headerlink" title="5.CRUD操作"></a>5.CRUD操作</h2><h3 id="5-1保存操作"><a href="#5-1保存操作" class="headerlink" title="5.1保存操作"></a>5.1保存操作</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">/**     * 保存操作     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注册驱动:</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获得连接:</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///jdbctest"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获得执行SQL语句的对象:</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写SQL：</span>            String sql <span class="token operator">=</span> <span class="token string">"insert into user values (null,'eee','123','张三')"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行SQL:</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 释放资源:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                conn <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="5-2修改操作"><a href="#5-2修改操作" class="headerlink" title="5.2修改操作"></a>5.2修改操作</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">/**     * 修改操作     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注册驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获得连接</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///jdbctest"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建执行SQL语句的对象:</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写SQL:</span>            String sql <span class="token operator">=</span> <span class="token string">"update user set username = 'qqq',password='456' , name='赵六' where uid = 4"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行SQL:</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 释放资源</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                conn <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="5-3删除操作"><a href="#5-3删除操作" class="headerlink" title="5.3删除操作"></a>5.3删除操作</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">/**     * 删除操作     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注册驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获得连接</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///jdbctest"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获得执行SQL语句的对象:</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写SQL:</span>            String sql <span class="token operator">=</span> <span class="token string">"delete from user where uid = 4"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行SQL:</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除成功!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 释放资源</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                conn <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="5-4查询操作"><a href="#5-4查询操作" class="headerlink" title="5.4查询操作"></a>5.4查询操作</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">/**     * 查询一条记录     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注册驱动</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获得连接</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///jdbctest"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建执行SQL语句的对象</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写SQL</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from user where uid = 1"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行SQL</span>            rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 释放资源</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rs <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                rs <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                conn <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">/**     * 查询所有记录     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注册驱动:</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获得连接:</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///jdbctest"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建执行SQL语句的对象:</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写SQL:</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行SQL:</span>            rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 遍历结果集:</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"    "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 释放资源</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rs <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                rs <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                conn <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="6-JDBC工具类"><a href="#6-JDBC工具类" class="headerlink" title="6.JDBC工具类"></a>6.JDBC工具类</h2><p>抽取公共操作，采用配置文件，建立<code>jdbc.properties</code></p><pre class="line-numbers language-java"><code class="language-java">driverClass<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverurl<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token comment" spellcheck="true">//jdbctest</span>username<span class="token operator">=</span>rootpassword<span class="token operator">=</span>abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>定义工具类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*     JDBC的工具类  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String driverClass<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String password<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加载属性文件并解析：</span>        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通常情况下使用类的加载器的方式进行获取：</span>        InputStream is <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        driverClass <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        url <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        username <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        password <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 注册驱动的方法     * @throws ClassNotFoundException      */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">{</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获得连接的方法:     * @throws SQLException      */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token function">loadDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> conn<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 资源释放     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span>Statement stmt<span class="token punctuation">,</span>Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span>Statement stmt<span class="token punctuation">,</span>Connection conn<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="7-SQL注入漏洞"><a href="#7-SQL注入漏洞" class="headerlink" title="7.SQL注入漏洞"></a>7.SQL注入漏洞</h2><p><strong>SQL</strong>注入漏洞在于<strong>SQL</strong>语句的拼接上，通过<strong>SQL</strong>的注释 或者或逻辑达到</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">/**     * 测试SQL注入漏洞的方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//or JDBCDemo.login("aaa --","sfsdfdsf")注释手段</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> JDBCDemo<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">"aaa' or '1=1"</span><span class="token punctuation">,</span> <span class="token string">"1fsdsdfsdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 产生SQL注入漏洞的方法     * @param username     * @param password     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement stmt  <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建执行SQL语句的对象:</span>            stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写SQL:</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from user where username = '"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">"' and password = '"</span><span class="token operator">+</span>password<span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行SQL:</span>            rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断结果集中是否有数据。</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> stmt<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="8-SQL语句漏洞解决"><a href="#8-SQL语句漏洞解决" class="headerlink" title="8.SQL语句漏洞解决"></a>8.SQL语句漏洞解决</h2><p><code>preparedStatement</code>是<code>Statement</code>的子接口，它的实例对象可以通过<code>Connection.preparedStatement(sql)</code>方法获得，相对于<code>Statement</code>对象而言:</p><ul><li><code>PreparedStatement</code>可以避免<code>SQL</code>注入的问题</li><li><code>Statement</code>会使数据库频繁编译<code>SQL</code>，可能造成数据库缓存区溢出。<code>PreparedStatement</code>会对<code>SQL</code>语句进行预编译</li><li><code>PreparedStatement</code>对于<code>SQL</code>中的参数，允许使用占位符的形式进行替换，简化<code>SQL</code>语句的编写</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 避免SQL注入漏洞的方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">login2</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pstmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获得连接:</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写SQL:</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from user where username = ? and password = ?"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 预处理SQL:</span>            pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置参数:</span>            pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行SQL：</span>            rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断结果街</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> pstmt<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="9-PreparedStatement使用"><a href="#9-PreparedStatement使用" class="headerlink" title="9.PreparedStatement使用"></a>9.PreparedStatement使用</h2><h3 id="9-1保存操作"><a href="#9-1保存操作" class="headerlink" title="9.1保存操作"></a>9.1保存操作</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">/**     * 保存数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pstmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获得连接:</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写SQL:</span>            String sql <span class="token operator">=</span> <span class="token string">"insert into user values (null,?,?,?)"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 预处理SQL:</span>            pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置参数的值:</span>            pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"qqq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"张武"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行SQL:</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 释放资源</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>pstmt<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="9-2修改操作"><a href="#9-2修改操作" class="headerlink" title="9.2修改操作"></a>9.2修改操作</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">/**     * 修改数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pstmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获得连接:</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写SQL:</span>            String sql <span class="token operator">=</span> <span class="token string">"update user set username = ?,password = ?,name = ? where uid = ?"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 预编译SQL:</span>            pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置参数:</span>            pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"www"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"张六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行SQL:</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>pstmt<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="9-3删除操作"><a href="#9-3删除操作" class="headerlink" title="9.3删除操作"></a>9.3删除操作</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">/**     * 查询所有数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pstmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获得连接:</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写SQL:</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 预编译SQL:</span>            pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置参数</span>            <span class="token comment" spellcheck="true">// 执行SQL:</span>            rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> pstmt<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">/**     * 删除数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pstmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获得连接:</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写SQL：</span>            String sql <span class="token operator">=</span> <span class="token string">"delete from user where uid = ?"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 预编译SQL:</span>            pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置参数:</span>            pstmt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行SQL:</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>pstmt<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="9-4查询操作"><a href="#9-4查询操作" class="headerlink" title="9.4查询操作"></a>9.4查询操作</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">/**     * 查询一条记录     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pstmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获得连接:</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写SQL：</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from user where uid = ?"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 预编译SQL:</span>            pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置参数:</span>            pstmt<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行SQL:</span>            rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断结果集:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> pstmt<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">/**     * 查询所有数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pstmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获得连接:</span>            conn <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写SQL:</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 预编译SQL:</span>            pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置参数</span>            <span class="token comment" spellcheck="true">// 执行SQL:</span>            rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> pstmt<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="10-连接池"><a href="#10-连接池" class="headerlink" title="10.连接池"></a>10.连接池</h2><p>连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要的线程使用</p><p>案例：</p><p><strong>C3P0</strong>连接池的使用，首先导入<code>c3p0-0.9.1.2.jar</code></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">/**     * 手动设置连接池     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获得连接:</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pstmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建连接池:</span>            ComboPooledDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置连接池的参数:</span>            dataSource<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dataSource<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///jdbctest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dataSource<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//账户</span>            dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//密码</span>            dataSource<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dataSource<span class="token punctuation">.</span><span class="token function">setInitialPoolSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获得连接:</span>            conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写Sql:</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 预编译SQL:</span>            pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置参数</span>            <span class="token comment" spellcheck="true">// 执行SQL:</span>            rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            JDBCUtils<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> pstmt<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token comment" spellcheck="true">/**     * 使用配置文件的方式     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement pstmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*// 获得连接:            ComboPooledDataSource dataSource = new ComboPooledDataSource();*/</span>            <span class="token comment" spellcheck="true">// 获得连接:</span>            <span class="token comment" spellcheck="true">// conn = dataSource.getConnection();</span>            conn <span class="token operator">=</span> JDBCUtils2<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 编写Sql:</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 预编译SQL:</span>            pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置参数</span>            <span class="token comment" spellcheck="true">// 执行SQL:</span>            rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            JDBCUtils2<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> pstmt<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.imooc.com/" target="_blank" rel="noopener">慕课网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇见MySQL</title>
      <link href="/2020/02/16/yu-jian-mysql/"/>
      <url>/2020/02/16/yu-jian-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="遇见MySQL"><a href="#遇见MySQL" class="headerlink" title="遇见MySQL"></a>遇见MySQL</h1><h2 id="1-MySQL数据类型"><a href="#1-MySQL数据类型" class="headerlink" title="1.MySQL数据类型"></a>1.MySQL数据类型</h2><h3 id="1-1MySQL相关操作"><a href="#1-1MySQL相关操作" class="headerlink" title="1.1MySQL相关操作"></a>1.1MySQL相关操作</h3><p>配置好系统变量后，进入<strong>cmd</strong></p><ul><li>登录:<ul><li><strong>mysql -uroot（用户） -p</strong></li><li><strong>mysql -uroot（用户） -pxxx（密码）</strong></li></ul></li><li>退出:<ul><li><strong>exit</strong></li><li><strong>quit</strong></li><li><strong>\q</strong></li></ul></li><li>登陆的同时打开指定数据库:<strong>mysql -uroot -p -D db_name</strong></li><li>命令行结束后默认使用:<ul><li>;</li><li><strong>\g</strong></li></ul></li><li>查询帮助:<ul><li><strong>help</strong></li><li><strong>\h</strong></li><li><strong>?+命令</strong></li></ul></li><li>取消当前命令执行:<ul><li><strong>\c</strong></li></ul></li></ul><p>常用<strong>SQL</strong>语句:</p><ul><li><strong><code>SELECT USER()</code></strong>:得到登录的用户</li><li><strong><code>SELECT VERSION()</code></strong>:得到MySQL的版本信息</li><li><strong><code>SELECT NOW()</code></strong>:得到当前的日期时间</li><li><strong><code>SELECT DATABASE()</code></strong>:得到当前打开的数据库</li></ul><blockquote><p>SQL语句规范：</p><ul><li>常用MySQL的关键字需要大写，库名、表名、字段名称需要小写</li><li>SQL语句支持折行操作，拆分的时候不能把完整单词拆开</li><li>数据库名称、表名称、字段名称不要使用MySQL的保留字。如果要使用，需要用反引号’’将其括起来</li></ul></blockquote><hr><h3 id="1-2-数据库相关操作"><a href="#1-2-数据库相关操作" class="headerlink" title="1.2.数据库相关操作"></a>1.2.数据库相关操作</h3><ul><li><p><strong><code>CREATE DATABASE|SCHEMA [IF NOT EXISTS]db_name [DEFAULT] CHARACTER SET [=] charset</code></strong>:创建数据库</p></li><li><p><code>[IF NOT EXISTS]</code>表示检查数据库名称是否存在  </p></li><li><p><code>[DEFAULT] CHARACTER SET [=] charset</code>表示指定编码方式</p></li><li><p><strong><code>SHOW DATABASES|SCHEMAS</code></strong>:查看当前服务器下全部数据</p></li><li><p><strong><code>SHOW CREATE DATABASE db_name</code></strong> :查看数据库的详细信息</p></li><li><p><strong><code>ALTER DATABASE db_name [DEFAULT] CHARACTER SET [=] CHARSET</code></strong>:修改指定数据库的编码方式</p></li><li><p><strong><code>USE db_name</code></strong>:打开指定数据库</p></li><li><p><strong><code>SELECT DATABASE()|SCHEMA()</code></strong>:得到当前打开数据库</p></li><li><p><strong><code>DROP DATABASE [IF EXISTS] db_name</code></strong>:删除指定的数据库</p></li><li><p><code>[IF EXISTS]</code>如果存在则删除</p></li><li><p><strong><code>SHOW WARNINGS</code></strong>:查看上一步警告</p></li></ul><hr><h3 id="1-3-数据表相关操作"><a href="#1-3-数据表相关操作" class="headerlink" title="1.3.数据表相关操作"></a>1.3.数据表相关操作</h3><p>数据表是由行(row)和列(column)组成。每个数据表至少有一列，行可以有零行，一行或者多行组成。表名要求唯一，不要包含特殊字符，定义明确。</p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE [IF NOT EXISTS]tbl_name(    字段名称 字段类型 [完整性约束条件]    字段名称 字段类型 [完整性约束条件]    ...)ENGINE=存储引擎 CHARset=编码方式;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="1-4-MySQL中的数据类型"><a href="#1-4-MySQL中的数据类型" class="headerlink" title="1.4.MySQL中的数据类型"></a>1.4.MySQL中的数据类型</h3><p>数值型：</p><ul><li>整数型</li><li>浮点数</li><li>定点数</li></ul><p>字符串类型</p><blockquote><p>CHAR效率高于VARCHAR，CHAR相当于空间换时间，VARCHAR时间换空间</p><p>CHAR默存储数据时，后面会用空格填充到指定长度；而在检索的时候回去掉后面的空格，VARCHAR检索的时候不进行填充，尾部的空格会留下</p></blockquote><p>日期时间类型</p><p><img src="0.png" alt></p><hr><h3 id="1-5-创建用户数据表"><a href="#1-5-创建用户数据表" class="headerlink" title="1.5.创建用户数据表"></a>1.5.创建用户数据表</h3><pre class="line-numbers language-mysql"><code class="language-mysql"># 创建数据库testCREATE DATABASE IF NOT EXISTS test DEFAULT CHARCTER SET 'UTF-8';# 打开testUSE test;# 用户表 userCREATE TABLE IF NOT EXISTS user(    id INT,    username VARCHAR(20),    password CHAR(32),    email VARCHAR(50),    age TINYINT,    card CHAR(18),    tel  CHAR(11),    salary FLOAT(8,2),    married TINYINT(1),    addr VARCHAR(100),    sex ENUM('男','女','保密'))ENGINE=INNODB CHARSET=UTF8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong><code>SHOW TABLES</code></strong>:查看当前数据库下已有数据表</li><li><strong><code>SHOW CREATE TABLE tbl_name</code></strong>:查看指定数据表的详细信息</li><li><strong><code>DESCRIBE tbl_name| DESCRIBE  tbl_name|SHOW COLUMNS FROM tbl_name</code></strong>:查看表结构</li><li><strong><code>DROP TABLE [IF EXISTS] db_name</code></strong>:删除数据表</li><li><strong><code>INSERT db_name(字段名称...) VALUES(对应的值...)</code></strong>:在数据表的指定字段插入值</li></ul><hr><h3 id="1-6-完整性约束条件"><a href="#1-6-完整性约束条件" class="headerlink" title="1.6.完整性约束条件"></a>1.6.完整性约束条件</h3><ul><li><strong>unsigned</strong>:无符号，没有负数，从0开始</li><li><strong>zerofill</strong>:零填充，当显示长度不够的时候可以使用前补0的效果填充至指定长度</li><li><strong>NOT NULL</strong>:非空约束，插入值的时候必须给字段赋值</li><li><strong>DEFAULT</strong>:默认值，如果插入记录没有赋值，就使用默认值</li><li><strong>PRIMARY KEY</strong>:主键，标识记录的唯一性。一个表只能有一个主键，自动停止为空</li><li><strong>UNIQUE KEY</strong>:唯一性，一个表可以有多个字段是唯一索引，值不能重复，但是NULL除外</li><li><strong>AUTO_INCREMENT</strong>:自动增长，只能用于数值列，而且配合索引所有</li><li><strong>FOREIGN KEY</strong>:外键约束</li></ul><p>完整的用户表创建</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 用户表userCREATE TABLE IF NOT EXISTS `user`(`id` INT UNSIGNED AUTO_INCREMENT KEY COMMENT '用户编号',`username` VARCHAR(20) NOT NULL UNIQUE COMMENT '用户名',`password` CHAR(32) NOT NULL COMMENT '密码',`email` VARCHAR(50) NOT NULL UNIQUE COMMENT '邮箱',`age` TINYINT UNSIGNED NOT NULL DEFAULT 18 COMMENT '年龄',`sex` ENUM('男','女','保密') NOT NULL DEFAULT '保密' COMMENT '性别',`tel` CHAR(11) NOT NULL UNIQUE COMMENT '电话',`addr` VARCHAR(50) NOT NULL DEFAULT '北京' COMMENT '地址',`card` CHAR(18) NOT NULL UNIQUE COMMENT '身份证号',`married` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '0代表未结婚，1代表已结婚',`salary` FLOAT(8,2) NOT NULL DEFAULT 0 COMMENT '薪水')ENGINE=INNODB DEFAULT CHARSET=UTF8;-- 测试布尔类型CREATE TABLE test_bool(id int,married BOOL);CREATE TABLE test_bool1(id int,married BOOLEAN);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-MySQL表的管理"><a href="#2-MySQL表的管理" class="headerlink" title="2.MySQL表的管理"></a>2.MySQL表的管理</h2><h3 id="2-1-添加和删除字段操作"><a href="#2-1-添加和删除字段操作" class="headerlink" title="2.1.添加和删除字段操作"></a>2.1.添加和删除字段操作</h3><ul><li><strong><code>ALTER TABLE tbl_name ADD 字段名称 字段属性\[完整性约束条件][FIRST|AFTER 字段名称]</code></strong>: 添加字段</li><li><strong><code>ALTER TABLE  tbl_name DROP 字段名称</code></strong>:删除字段</li></ul><hr><h3 id="2-2-添加和删除默认值操作"><a href="#2-2-添加和删除默认值操作" class="headerlink" title="2.2.添加和删除默认值操作"></a>2.2.添加和删除默认值操作</h3><ul><li><strong><code>ALTER TABLE tbl_name ALTER 字段名称 SET  DEFAULT 默认值</code></strong>:添加默认值</li><li><strong><code>ALTER TABLE tbl_name ALTER 字段名称 DROP DEFAULT</code></strong>:删除默认值</li></ul><hr><h3 id="2-3-MODIEY和CHANGE关键字使用"><a href="#2-3-MODIEY和CHANGE关键字使用" class="headerlink" title="2.3.MODIEY和CHANGE关键字使用"></a>2.3.MODIEY和CHANGE关键字使用</h3><ul><li><strong><code>ALTER TABLE tbl_name MODIEY 字段名称 字段类型 \[字段属性] [FIRST|AFTER 字段名称]</code></strong>:修改字段类型、字段属性</li><li><strong><code>ALTER TABLE tbl_name CHANGE 原字段名称 新字段名称 字段类型 字段属性 [FIRST|AFTER 字段名称]</code></strong>:修改字段名称、字段类型、字段属性</li></ul><hr><h3 id="2-4-主键和唯一索引操作"><a href="#2-4-主键和唯一索引操作" class="headerlink" title="2.4.主键和唯一索引操作"></a>2.4.主键和唯一索引操作</h3><ul><li><strong><code>ALTER TABLE tbl_name ADD PRIMARY KEY(字段名称)</code></strong>:添加主键</li><li><strong><code>ALTER TABLE tbl_name DROP PRIMARY KEY</code></strong>:删除主键</li></ul><blockquote><p>如果有自增的话，要MODIEY之后才能删除主键</p></blockquote><ul><li><strong><code>ALTER TABLE tbl_name ADD UNIQUE KEY|INDEX index_name(字段名称)</code></strong>:添加唯一</li><li><strong><code>ALTER TABLE tbl_name DROP index_name</code></strong>:删除唯一</li></ul><hr><h3 id="2-5-重命名表的操作"><a href="#2-5-重命名表的操作" class="headerlink" title="2.5.重命名表的操作"></a>2.5.重命名表的操作</h3><ul><li><strong><code>ALTER TABLE tbl_name RENAME [TO|AS] new_tbl_name</code></strong>:修改数据表名称</li><li><strong><code>RENAME TABLE tbl_name TO new_tbl_name</code></strong>:修改数据表名称</li></ul><hr><h3 id="2-6MyISAM存储引擎"><a href="#2-6MyISAM存储引擎" class="headerlink" title="2.6MyISAM存储引擎"></a>2.6MyISAM存储引擎</h3><p>默认<strong>MyISAM</strong>的表会在磁盘中产生3个文件：</p><ul><li>.frm:表结构</li><li>.MYD:数据文件</li><li>.MYI:索引文件</li></ul><p>可以在创建表的时候指定数据文件和索引文件的存储位置，只有<strong>MyISAM</strong>表支持</p><ul><li><strong><code>DATA DIRECTORY  [=]</code></strong>: 数据保存的绝对路径</li><li><strong><code>INDEX DIRECTORY [=]</code></strong>:索引文件保存的绝对路径</li></ul><p><strong>MyISAM</strong>单表最大支持的数据量为$2^{64}$次方条记录，每个表最多可以建立64个索引</p><p>如果是复合索引，每个复合索引最多包含16个列，索引值最大长度是1000B</p><p><strong>MyISAM</strong>引擎的储存格式：</p><ul><li>定长(FIXED静态)，是指字段中不包含VARCHAR/TEXT/BLOB</li><li>动态(DYNAMIC),  只要字段中包含VARCHAR/TEXT/BLOB</li><li>压缩(COMPRESSED)，mysampack创建</li></ul><hr><h3 id="2-7InnoDB储存引擎"><a href="#2-7InnoDB储存引擎" class="headerlink" title="2.7InnoDB储存引擎"></a>2.7InnoDB储存引擎</h3><p>设计遵循<strong>ACID</strong>模型，支持事务，具有从服务崩溃中恢复的能力，能够最大限度保护用户数据：</p><ul><li>原子性(Aromiocity)</li><li>一致性(Consistency)</li><li>隔离性(Isolation)</li><li>持久性(Durability)</li></ul><p>支持行级锁，可以提升多用户并发时的读写性能</p><p>支持外键，保证数据的一致性和完整性</p><p><strong>InnoDB</strong>拥有自己独立的缓冲池，常用的数据和索引都在缓存中</p><p>对于<strong>INSERT,UPDATE,DELETE</strong>操作，<strong>InnoDB</strong>会使用一种<strong>change buffering</strong>的机制来自动优化，还可以提供一致性的读，并且还能够缓存变更的数据，减少磁盘<strong>I/O</strong>，提高读写性能</p><p>创建<strong>InnoDB</strong>表之后会产生两个文件：</p><ul><li>.frm:表结构文件</li><li>.ibd:数据和索引储存表空间</li></ul><blockquote><p>所有的表都需要创建主键，最后是配合AUTO_INCREMENT，也可以设置经常查询的列作为主键</p></blockquote><hr><h2 id="3-MySQL数据管理"><a href="#3-MySQL数据管理" class="headerlink" title="3.MySQL数据管理"></a>3.MySQL数据管理</h2><h3 id="3-1MySQL数据操作"><a href="#3-1MySQL数据操作" class="headerlink" title="3.1MySQL数据操作"></a>3.1MySQL数据操作</h3><p>添加记录</p><ul><li><strong><code>INSERT [INTO] tbl_name[(col_name,...)] {VALUE|VALUES}(VALUES...)</code></strong>:添加记录</li><li><strong><code>INSERT tbl_name VAULE(value...)</code></strong>:不指定字段名称添加记录</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">-- 测试添加记录CREATE DATABASE IF NOT EXISTS king DEFAULT CHARACTER SET 'UTF8';USE king;CREATE TABLE IF NOT EXISTS user(    id INT UNSIGNED AUTO_INCREMENT KEY COMMENT '编号',    username VARCHAR(20) NOT NULL UNIQUE COMMENT '用户名',    age TINYINT UNSIGNED DEFAULT 18 COMMENT '年龄',    email VARCHAR(50) NOT NULL DEFAULT 'imooc@qq.com' COMMENT '邮箱')ENGINE=INNODB CHARSET=UTF8;-- 不指定字段名称INSERT user VALUE(1,'king',24,'382771946@qq.com');INSERT user VALUES(NULL,'queen',25,'queen@qq.com');INSERT user VALUES(DEFAULT,'lily',26,'lily@qq.com');-- 列出指定字段的形式INSERT user(username,email) VALUES('rose','rose@qq.com');INSERT user(age,email,id,username) VALUES(34,'imooc@qq.com',5,'imooc');-- 一次插入3条记录INSERT user VALUES(NULL,'a',DEFAULT,DEFAULT),(NULL,'b',56,'b@qq.com'),(NULL,'c',14,'c@qq.com');-- INSERT ...SET 的形式INSERT user SET username='d',age=45,email='d@qq.com';-- INSERT SELECTINSERT user(username) SELECT a FROM test;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改记录</p><ul><li><strong><code>UPDATE tbl_name SET字段名称=值... [WHERE 条件]</code></strong>:修改记录，如果不添加条件，整个表中的记录都会被更新</li></ul><p>删除记录</p><ul><li><strong><code>DELETE FROM tbl_name [WHERE 条件]</code></strong>:如果不添加条件，表中所有记录都被删除。不会重置AUTO_INCREMENT的值，可以通过ALTER语句将其重置为1</li><li><strong><code>TRUNCATE [TABLE] tbl_name</code></strong>:彻底清空数据表，会重置AUTO_INCREMENT的值</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">-- 测试更新语句-- 修改第一个用户的信息 id=1UPDATE user SET age=29 WHERE id=1;-- 修改id=3的用户，username age emailUPDATE user SET age=47,email='lilys@qq.com',username='lilys' WHERE id=3;-- 所有用户年龄+10UPDATE user SET age=age+10;-- 将id<=5的用户年龄改为-20，将邮箱改为默认值UPDATE user SET age=age-20,email=DEFAULT WHERE id<=5;-- 测试删除语句-- 删除用户名为kingDELETE FROM user WHERE username='king';-- 删除年龄为24的用户DELETE FROM user WHERE age=24;-- 删除表中所有记录DELETE FROM user;INSERT user VALUES(NULL,'queen',25,'queen@qq.com');INSERT user VALUES(DEFAULT,'lily',26,'lily@qq.com');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询记录</p><ul><li><strong><code>SELECT select_expr,... FROM tbl_name [WHERE 条件] [GROUP BY {col_name|position} HAVING 二次筛选] [ORDER BY {col_name|position|expr}] [ASC|DESC] [LIMIT 限制结果集的显示条数]</code></strong></li><li><strong><code>SELECT  * FROM tbl_name</code></strong>:查询表中所有记录</li><li><strong><code>SELECT 字段名称... FROM tbl_name</code></strong>:指定字段信息</li><li><strong><code>SELECT 字段名称... FROM db_name.tbl_name</code></strong>:库名.表名</li><li><strong><code>SELECT 字段名称 [AS] 别名名称,... FROM db_name.tbl_name</code></strong>:给字段起别名</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">-- 测试查询操作CREATE TABLE user1(id INT UNSIGNED AUTO_INCREMENT KEY,username VARCHAR(20) NOT NULL UNIQUE COMMENT '编号',age TINYINT UNSIGNED NOT NULL DEFAULT 18  COMMENT '年龄',sex ENUM('男','女','保密') NOT NULL DEFAULT '保密' COMMENT '性别',addr VARCHAR(20) NOT NULL DEFAULT '北京',married TINYINT(1) NOT NULL DEFAULT 0 COMMENT '0代表未结婚，1代表已婚',salary FLOAT(8,2) NOT NULL DEFAULT 0 COMMENT '薪水')ENGINE=INNODB CHARSET=UTF8;INSERT user1 VALUES(1,'king',23,'男','北京',1,50000);INSERT user1(username,age,sex,addr,married,salary) VALUES('queen',27,'女','上海',0,25000);INSERT user1 SET username='imooc',age=31,sex='女',addr='北京',salary=40000;INSERT user1 VALUES(NULL,'张三',38,'男','上海',0,15000),(NULL,'张三风',38,'男','上海',0,15000),(NULL,'张子怡',39,'女','北京',1,85000),(NULL,'汪峰',42,'男','深圳',1,95000),(NULL,'刘德华',58,'男','广州',0,115000),(NULL,'吴亦凡',28,'男','北京',0,75000),(NULL,'奶茶妹',18,'女','北京',1,65000),(NULL,'刘嘉玲',36,'女','广州',0,15000);-- 查询表中所有记录SELECT * FROM user1;-- username,addr,ageSELECT username,addr,age FROM user1;-- 查询king数据库下user1表中的所有记录SELECT * FROM king.user1;-- 查询user1表中的id 编号 username 用户名 sex 性别SELECT id AS '编号',username AS '用户名', sex AS '性别'FROM user1;SELECT id age,age id,username FROM user1;-- 给表起别名SELECT id,username FROM user1 AS u;-- 测试表名.字段名SELECT user1.id,user1.username,user1.age FROM user1 ;SELECT u.id,u.username,u.addr,u.sex FROM user1 AS u;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>WHERE</strong>条件筛选</p><ul><li>比较运算符: &gt; &gt;= &lt; &lt;= != &lt;&gt; &lt;=&gt;</li><li><strong>IS [NOT] NULL</strong>: 检测值是否为NULL或者NOT NULL</li><li>指定范围：[NOT] BETWEEN …AND</li><li>指定集合:  [NOT]IN(值…)</li><li>逻辑运算符: AND  OR</li><li>匹配字符: [NOT] LIKE   %(任意长度的字符串)   _(任意一个字符)</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">-- 测试WHERE 条件的比较运算符-- 查询id,username,age id=5的用户SELECT id,username,age FROM user1WHERE id=5;SELECT id,username,age FROM user1WHERE id=50;-- 添加desc字段 VARCHAR(100)ALTER TABLE user1ADD userDesc VARCHAR(100);-- 更新id<=9的用户 userDesc='this is a test'UPDATE user1 SET userDesc='this is a test'WHERE id<=9;-- 查询用户userDesc 为NULL的用户SELECT id,username,age,userDesc FROM user1WHERE userDesc=NULL;-- 检测NULL值SELECT id,username,age,userDesc FROM user1WHERE userDesc<=>NULL;-- IS [NOT] NULL检测NULL值SELECT id,username,age,userDesc FROM user1WHERE userDesc IS NULL;-- 测试范围BETWEEN AND-- 查询年龄在18~30之间的用户SELECT id,username,age,sex FROM user1WHERE age BETWEEN 18 AND 30;-- 查询薪水在10000~50000之间的用户SELECT id,username,age,salary FROM user1WHERE salary BETWEEN 10000 AND 50000;SELECT id,username,age,salary FROM user1WHERE salary NOT BETWEEN 10000 AND 50000;-- 测试指定集合 IN-- 查询编号为1,3,5,7,9SELECT id,username,age FROM user1WHERE id IN(1,3,5,7,9,29,45,78);SELECT id,username,age FROM user1WHERE username IN('king','queen','lily','rose');-- 测试逻辑运算符-- 查询性别为男并且年龄>=20的用户SELECT id,username,age,sex FROM user1WHERE sex='男' AND age>=20;-- id>=5 && age<=30SELECT id,username,age,sex FROM user1WHERE id>=5 AND age<=30;SELECT id,username,age,sex FROM user1WHERE id>=5 AND age<=30 AND sex='男';-- 要求sex='女' 并且 addr='北京'SELECT id,username,age,sex,addr FROM user1WHERE sex='女' AND addr='北京';-- 查询薪水范围在60000~10000并且性别为男 addr='北京'SELECT id,username,age,sex,salary,addr FROM user1WHERE salary BETWEEN 60000 AND 100000 AND sex='男' AND addr='北京';-- 查询id=1 或者 用户名为queenSELECT id,username,age FROM user1WHERE id=1 OR username='queen';-- 测试模糊查询SELECT id,username,age FROM user1WHERE username='king';SELECT id,username,age FROM user1WHERE username LIKE 'king';-- 要求用户名中包含三SELECT id,username,age,sex FROM user1WHERE username LIKE '%三%';-- 用户名中包含nSELECT id,username,age FROM user1WHERE username LIKE '%in%';-- 要求查询出姓张的用户SELECT id,username,age FROM user1WHERE username LIKE '张%';-- 查询以风结尾的用户SELECT id,username,age FROM user1WHERE username LIKE '%风';-- 用户名长度为三位的用户SELECT id,username,age,sex FROM user1WHERE username LIKE '___';SELECT id,username,age,sex FROM user1WHERE username LIKE '张_';SELECT id,username,age,sex FROM user1WHERE username LIKE '张_%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-2GROUP-BY-对记录进行分组"><a href="#3-2GROUP-BY-对记录进行分组" class="headerlink" title="3.2GROUP BY 对记录进行分组"></a>3.2GROUP BY 对记录进行分组</h3><p><strong>GROUP BY</strong>把值相同放到一个组中，最终查询出的结果只会显示组中一条记录</p><p>分组配合GROUP _CONCAT()查看组中某个字段的详细信息</p><p>配合聚合函数使用：</p><ul><li><code>COUNT()</code>:统计记录总数<ul><li><code>COUNT(字段名称)</code>，字段中的值为NULL，不统计进来</li><li><code>COUNT(*)</code>会统计NULL值</li></ul></li><li><code>SUM()</code>:求和</li><li><code>MAX()</code>:求最大值</li><li><code>MIN()</code>:求最小值</li><li><code>AVG()</code>:求平均值</li></ul><p>配合WITH ROLLUP关键使用，会在记录末尾添加一条记录，是上面所有记录总和</p><p>HAVING字句对分组结果进行二次筛选</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 测试分组-- 按照性别分组sexSELECT id,username,age,sex FROM user1GROUP BY sex;-- 按照addr分组SELECT username,age,sex,addr FROM user1GROUP BY addr;-- 按照性别分组，查询组中的用户名有哪些SELECT GROUP_CONCAT(username),age,sex,addr FROM user1GROUP BY sex;SELECT GROUP_CONCAT(username),age,sex,GROUP_CONCAT(addr) FROM user1GROUP BY sex;-- 测试COUNT()SELECT COUNT(*) FROM user1;SELECT COUNT(id) FROM user1;-- 按照sex分组，得到用户名详情，并且分别组中的总人数SELECT sex,GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsers FROM user1GROUP BY sex;-- 按照addr分组，得到用户名的详情，总人数，得到组中年龄的总和，年龄的最大值、最小值、平均值和SELECT addr,GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsers,SUM(age) AS sum_age,MAX(age) AS max_age,MIN(age) AS min_age,AVG(age) AS avg_ageFROM user1GROUP BY addr;-- 按照sex分组，统计组中总人数、用户名详情，得到薪水总和，薪水最大值、最小值、平均值SELECT sex,GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsers,SUM(salary) AS sum_salary,MAX(salary) AS max_salary,MIN(salary) AS min_salary,AVG(salary) AS avg_salaryFROM user1GROUP BY sex;SELECT GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsersFROM user1GROUP BY sexWITH ROLLUP;-- 按照字段的位置来分组SELECT id,sex,GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsers,SUM(salary) AS sum_salary,MAX(salary) AS max_salary,MIN(salary) AS min_salary,AVG(salary) AS avg_salaryFROM user1GROUP BY 2;-- 查询age>=30的用户并且按照sex分组SELECT sex,GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsersFROM user1WHERE age>=30GROUP BY sex;-- 按照addr分组，统计总人数SELECT addr,GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsersFROM user1GROUP BY addr;-- 对于分组结果进行二次筛选，条件是组中总人数>=3SELECT addr,GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsersFROM user1GROUP BY addrHAVING COUNT(*)>=3;SELECT addr,GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsersFROM user1GROUP BY addrHAVING totalUsers>=3;-- 按照addr分组，SELECT addr,GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsers,SUM(salary) AS sum_salary,MAX(salary) AS max_salary,MIN(salary) AS min_salary,AVG(salary) AS avg_salaryFROM user1GROUP BY addr;-- 要求平均薪水>=40000SELECT addr,GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsers,SUM(salary) AS sum_salary,MAX(salary) AS max_salary,MIN(salary) AS min_salary,AVG(salary) AS avg_salaryFROM user1GROUP BY addrHAVING avg_salary>=40000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-3ORDER-BY实现排序"><a href="#3-3ORDER-BY实现排序" class="headerlink" title="3.3ORDER BY实现排序"></a>3.3ORDER BY实现排序</h3><p><strong>ORDER BY</strong>排序：</p><ul><li><strong><code>ORDER BY字段名称 ASC|DESC</code></strong></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">-- 测试排序-- 按照id降序排列SELECT id,username,ageFROM user1ORDER BY id DESC;-- 按照age升序SELECT id,username,ageFROM user1ORDER BY age ;-- 按照多个字段排序SELECT id,username,ageFROM user1ORDER BY age ASC,id ASC;-- 测试条件+排序SELECT id,username,ageFROM user1WHERE age>=30;SELECT id,username,ageFROM user1WHERE age>=30ORDER BY age DESC;-- 实现随机记录SELECT id,username,ageFROM user1ORDER BY RAND();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-4LIMIT限制结果集的显示条数"><a href="#3-4LIMIT限制结果集的显示条数" class="headerlink" title="3.4LIMIT限制结果集的显示条数"></a>3.4LIMIT限制结果集的显示条数</h3><p><strong>LIMIT</strong>限制结果集显示条数：</p><ul><li><strong>LIMIT</strong>值: 显示结果集的前几条记录</li><li><strong>LIMIT offset,row_count</strong>: 从offset，显示几条记录</li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">-- 测试LIMIT语句-- 显示结果集的前5条记录SELECT id,username,age,sexFROM user1LIMIT 5;SELECT id,username,age,sexFROM user1LIMIT 0,5;-- 显示前3条记录SELECT id,username,age,sexFROM user1LIMIT 0,3;SELECT id,username,age,sexFROM user1LIMIT 3,3;-- 更新前3条记录，将age+5UPDATE user1 SET age=age+5 LIMIT 3;-- 按照id降序排列，更新前三条记录，将age-10UPDATE user1 SET age=age-10 ORDER BY id DESC LIMIT 3;-- 删除前三条记录DELETE FROM user1LIMIT 3;DELETE FROM user1ORDER BY id DESCLIMIT 3;-- 测试完整SELECT 语句的形式SELECT addr,GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsers,SUM(age) AS sum_age,MAX(age) AS max_age,MIN(age) AS min_age,AVG(age) AS avg_ageFROM user1WHERE id>=2GROUP BY addr;SELECT addr,GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsers,SUM(age) AS sum_age,MAX(age) AS max_age,MIN(age) AS min_age,AVG(age) AS avg_ageFROM user1WHERE id>=2GROUP BY addrHAVING totalUsers>=2;SELECT addr,GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsers,SUM(age) AS sum_age,MAX(age) AS max_age,MIN(age) AS min_age,AVG(age) AS avg_ageFROM user1WHERE id>=2GROUP BY addrHAVING totalUsers>=2ORDER BY totalUsers ASC;SELECT addr,GROUP_CONCAT(username) AS usersDetail,COUNT(*) AS totalUsers,SUM(age) AS sum_age,MAX(age) AS max_age,MIN(age) AS min_age,AVG(age) AS avg_ageFROM user1WHERE id>=2GROUP BY addrHAVING totalUsers>=2ORDER BY totalUsers ASCLIMIT 0,2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-5多表联查"><a href="#3-5多表联查" class="headerlink" title="3.5多表联查"></a>3.5多表联查</h3><p>多表查询：</p><ul><li>笛卡尔积的形式</li><li>内连接的形式：<strong><code>SELECT 字段名称,... FROM tbl_name1 INNER JOIN tbl_name2 ON 链接条件</code></strong>，查询两个表中符合连接条件的记录</li><li>外连接的形式:<ul><li>左外连接：<strong><code>SELECT 字段名称,... FROM tbl_name1  LEFT [OUTER] JOIN tbl_name2 ON 条件</code></strong>，先显示左表中的全部记录，再去右表中查询复合记录，不符合的用NULL代替</li><li>右外连接：<strong><code>SELECT 字段名称,... FROM tbl_name1 RIGHT [OUTER] JOIN tbl_name2 ON 条件</code></strong>，先显示右表中的全部记录，再去左表中查询复合记录，不符合的用NULL代替</li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE DATABASE IF NOT EXISTS test2 DEFAULT CHARACTER SET 'UTF8';USE test2;CREATE TABLE emp(id INT UNSIGNED AUTO_INCREMENT KEY,username VARCHAR(20) NOT NULL UNIQUE COMMENT '编号',age TINYINT UNSIGNED NOT NULL DEFAULT 18  COMMENT '年龄',sex ENUM('男','女','保密') NOT NULL DEFAULT '保密' COMMENT '性别',addr VARCHAR(20) NOT NULL DEFAULT '北京',depId TINYINT UNSIGNED NOT NULL COMMENT '部门对应的编号')ENGINE=INNODB CHARSET=UTF8;INSERT emp(username,age,depId) VALUES('king',24,1),('queen',25,2),('imooc',26,1),('lily',27,1),('rose',28,3),('john',29,3);INSERT emp(username,age,depId)  VALUES('测试用户',39,6);CREATE TABLE dep(id TINYINT UNSIGNED AUTO_INCREMENT KEY,depName VARCHAR(50) NOT NULL UNIQUE,depDesc VARCHAR(100) NOT NULL DEFAULT '')ENGINE=INNODB CHARSET=UTF8;INSERT dep(depName,depDesc) VALUES('PHP教学部','研发PHP课件'),('JAVA教学部','研发JAVA课件'),('WEB前端教学部','研发WEB前端课件'),('IOS教学部','研发IOS课件');-- 查询 emp id username age  部门名称 dep depNameSELECT emp.id,emp.username,emp.age,dep.depName FROM emp,dep;SELECT e.id,e.username,e.age,d.depNameFROM emp AS eINNER JOIN dep AS dON e.depId=d.id;-- 查询emp id username age addr dep id depName depDescSELECT e.id,e.username,e.age,e.addr,d.id,d.depName,d.depDescFROM dep AS dJOIN emp AS eON d.id=e.depId;-- 测试左外连接SELECT e.id,e.username,e.age,d.depName,d.depDescFROM emp AS eLEFT OUTER JOIN dep AS dON e.depId=d.id;-- 测试右外连接SELECT e.id,e.username,e.age,d.depName,d.depDescFROM emp AS eRIGHT JOIN dep AS dON e.depId=d.id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复合查询操作案例：</p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 创建管理员表CREATE TABLE user(id TINYINT UNSIGNED AUTO_INCREMENT KEY,username VARCHAR(20) NOT NULL UNIQUE,email VARCHAR(50) NOT NULL DEFAULT '382771946@qq.com',proName VARCHAR(10) NOT NULL DEFAULT '北京');INSERT user(username,proName) VALUES('a','北京'),('b','哈尔滨'),('c','上海'),('d','深圳'),('e','广州'),('f','重启');-- 创建省份表CREATE TABLE provinces(id TINYINT UNSIGNED AUTO_INCREMENT KEY,proName VARCHAR(10) NOT NULL UNIQUE);INSERT provinces(proName) VALUES('北京'),('上海'),('深圳');--CREATE TABLE user(id TINYINT UNSIGNED AUTO_INCREMENT KEY,username VARCHAR(20) NOT NULL UNIQUE,email VARCHAR(50) NOT NULL DEFAULT '382771946@qq.com',proId TINYINT UNSIGNED NOT NULL);INSERT user(username,proId) VALUES('a',1);INSERT user(username,proId) VALUES('b',1);INSERT user(username,proId) VALUES('c',1);INSERT user(username,proId) VALUES('d',2);INSERT user(username,proId) VALUES('e',3);INSERT user(username,proId) VALUES('f',1);INSERT user(username,proId) VALUES('g',1);-- 查询user id ,username provinces proNameSELECT u.id,u.username,p.proNameFROM user AS uJOIN provinces AS pON u.proId=p.id;-- 创建省份表CREATE TABLE provinces(id TINYINT UNSIGNED AUTO_INCREMENT KEY,proName VARCHAR(10) NOT NULL UNIQUE);-- 管理员admin id username email proIdCREATE TABLE admin(id TINYINT UNSIGNED AUTO_INCREMENT KEY,username VARCHAR(20) NOT NULL UNIQUE,email VARCHAR(50) NOT NULL DEFAULT '382771946@qq.com',proId TINYINT UNSIGNED NOT NULL);INSERT admin(username,proId) VALUES('king',1);INSERT admin(username,proId) VALUES('queen',2);-- 商品分类cate id cateName cateDescCREATE TABLE cate(id TINYINT UNSIGNED AUTO_INCREMENT KEY,cateName VARCHAR(50) NOT NULL UNIQUE,cateDesc VARCHAR(100) NOT NULL DEFAULT '');INSERT cate(cateName) VALUES('母婴');INSERT cate(cateName) VALUES('服装');INSERT cate(cateName) VALUES('电子');-- 商品表products id productName, price,cateIdCREATE TABLE products(id INT UNSIGNED AUTO_INCREMENT KEY,productName VARCHAR(50) NOT NULL UNIQUE,price FLOAT(8,2) NOT NULL DEFAULT 0,cateId TINYINT UNSIGNED NOT NULL,adminId TINYINT UNSIGNED NOT NULL);INSERT products(productName,price,cateId,adminId)VALUES('iphone9',9888,3,1),('adidas',388,2,2),('nike',888,2,2),('奶瓶',288,1,1);-- 查询products id productName price --- cate cateNameSELECT p.id,p.productName,p.price,c.cateNameFROM products AS pJOIN cate AS cON p.cateId=c.id;-- 查询管理员 id username email -- provinces proNameSELECT a.id,a.username,a.email,p.proNameFROM admin AS aJOIN provinces AS pON a.proId=p.id;-- 查询 products id productName price-- cate cateName-- admin username emailSELECT p.id,p.productName,p.price,c.cateName,a.username,a.emailFROM products AS pJOIN admin AS aON p.adminId=a.idJOIN cate AS cON p.cateId=c.idWHERE p.price<1000ORDER BY p.price DESCLIMIT 0,2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-6外键约束"><a href="#3-6外键约束" class="headerlink" title="3.6外键约束"></a>3.6外键约束</h3><p>外键作用是保持数据的一致性和完整性，只有<strong>InnoDB</strong>储存引擎支持外键</p><p>创建外键:</p><ul><li>建表时创建外键:<strong><code>[CONSTRAINT 外键名称] FOREIGN KEY(字段名称) REFERENCES 主表(字段名称)</code></strong><ul><li>子表的外键字段和主表字段类型要相似。如果是数值型要求一致，并且无符号也要求一致；如果是字符类型要求一致，长度可以不同。</li><li>如果外键字段没有创建索引，MySQL会自动添加索引</li><li>子表的外键关联必须是父表的主键</li></ul></li><li>动态删除外键:<strong><code>ALTER TABLE tbl_name DROP FOREIGN KEY fk_name</code></strong></li><li>动态添加外键: <strong><code>ALTER TABLE tbl_name ADD [CONSTRAINT 外键名称] FOREIGN KEY (外键字段) REFERENCES 主表(主键字段)</code></strong></li><li>外键约束的参照操作:<ul><li><code>CASCADE</code>:从父表删除或更新，子表也跟着删除或者更新，级联的操作</li><li>SET NULL`:从父表删除或者更新，并设置子表的外键列为NULL</li><li><code>NO ACTION|RESTRICT</code>:拒绝对父表进行更新或者删除操作</li></ul></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">-- 测试外键-- 新闻分类表 news_cateCREATE TABLE news_cate(id TINYINT UNSIGNED AUTO_INCREMENT KEY,cateName VARCHAR(50) NOT NULL UNIQUE,cateDesc VARCHAR(100) NOT NULL DEFAULT '');-- 新闻表 newsCREATE TABLE news(id INT UNSIGNED AUTO_INCREMENT KEY,title VARCHAR(100) NOT NULL UNIQUE,content VARCHAR(1000) NOT NULL,cateId TINYINT UNSIGNED NOT NULL);INSERT news_cate(cateName) VALUES('国内新闻'),('国际新闻'),('娱乐新闻'),('体育新闻');INSERT news(title,content,cateId) VALUES('a1','aaaa1',1),('a2','aaaa2',1),('a3','aaaa3',4),('a4','aaaa4',2),('a5','aaaa5',3);-- 查询news id title content-- news_cate cateNameSELECT n.id,n.title,n.content,c.cateNameFROM news AS nJOIN news_cate AS cON n.cateId=c.id;INSERT news(title,content,cateId) VALUES('a6','aaaa6',45);-- 添加外键-- 新闻分类表 news_cateCREATE TABLE news_cate(id TINYINT UNSIGNED AUTO_INCREMENT KEY,cateName VARCHAR(50) NOT NULL UNIQUE,cateDesc VARCHAR(100) NOT NULL DEFAULT '')ENGINE=INNODB;-- 新闻表 newsCREATE TABLE news(id INT UNSIGNED AUTO_INCREMENT KEY,title VARCHAR(100) NOT NULL UNIQUE,content VARCHAR(1000) NOT NULL,cateId TINYINT UNSIGNED NOT NULL,FOREIGN KEY(cateId) REFERENCES news_cate(id))ENGINE=INNODB;INSERT news_cate(cateName) VALUES('国内新闻'),('国际新闻'),('娱乐新闻'),('体育新闻');INSERT news(title,content,cateId) VALUES('a1','aaaa1',1),('a2','aaaa2',1),('a3','aaaa3',4),('a4','aaaa4',2),('a5','aaaa5',3);-- 测试非法记录INSERT news(title,content,cateId) VALUES('b1','bbbb1',8);-- 测试删除父表中的记录 和删除父表DELETE FROM news_cate WHERE id=1;UPDATE news_cate SET id=10 WHERE id=1;INSERT news_cate(cateName) VALUES('教育新闻');-- 将教育新闻 改成教育UPDATE news_cate SET cateName='教育' WHERE id=5;UPDATE news_cate SET id=50 WHERE cateName='教育';-- 添加外键名称-- 新闻分类表 news_cateCREATE TABLE news_cate(id TINYINT UNSIGNED AUTO_INCREMENT KEY,cateName VARCHAR(50) NOT NULL UNIQUE,cateDesc VARCHAR(100) NOT NULL DEFAULT '')ENGINE=INNODB;-- 新闻表 newsCREATE TABLE news(id INT UNSIGNED AUTO_INCREMENT KEY,title VARCHAR(100) NOT NULL UNIQUE,content VARCHAR(1000) NOT NULL,cateId TINYINT UNSIGNED NOT NULL,CONSTRAINT cateId_fk_newsCate FOREIGN KEY(cateId) REFERENCES news_cate(id))ENGINE=INNODB;-- 删除外键ALTER TABLE newsDROP FOREIGN KEY cateId_fk_newsCate;-- 添加外键ALTER TABLE newsADD FOREIGN KEY(cateId) REFERENCES news_cate(id);-- 删除外键ALTER TABLE newsDROP FOREIGN KEY news_ibfk_1;ALTER TABLE newsADD CONSTRAINT cateId_fk_newsCate FOREIGN KEY(cateId) REFERENCES news_cate(id);INSERT news_cate(cateName) VALUES('国内新闻'),('国际新闻'),('娱乐新闻'),('体育新闻');INSERT news(title,content,cateId) VALUES('a1','aaaa1',1),('a2','aaaa2',1),('a3','aaaa3',4),('a4','aaaa4',2),('a5','aaaa5',8);ALTER TABLE newsADD FOREIGN KEY(cateId) REFERENCES news_cate(id);-- 指定级联操作 DELETE CASCADE UPDATE CASCADEALTER TABLE newsADD FOREIGN KEY(cateId) REFERENCES news_cate(id)ON DELETE CASCADE ON UPDATE CASCADE;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-7子查询使用"><a href="#3-7子查询使用" class="headerlink" title="3.7子查询使用"></a>3.7子查询使用</h3><p>子查询: <strong><code>SELECT 字段名称 FROM tbl_name WHERE col_name FORM tbl_name</code></strong></p><p>内层语句查询的结果可以做为外层语句查询的条件。</p><p>由<strong>IN</strong>引发的子查询</p><p>由比较运算符引发的子查询</p><p>由<strong>EXISTS</strong>引发的子查询</p><p><em><em>ANY SOME ALL </em></em></p><p>联合查询:</p><ul><li>UNION: <strong><code>SELECT 字段名称 ,...FROM tbl_name1 UNION SELECT 字段名称...FROM tbl_name2</code></strong></li><li>UNION ALL: <strong><code>SELECT 字段名称,... FROM tbl_name1 UNION ALL SELECT 字段名称... FROM tbl_name2</code></strong></li></ul><pre class="line-numbers language-Mysql"><code class="language-Mysql">-- 测试子查询-- 测试由IN引发的子查询SELECT * FROM empWHERE depId IN (SELECT id FROM dep);SELECT * FROM empWHERE depId NOT IN (SELECT id FROM dep);-- 学员stuCREATE TABLE stu(id TINYINT UNSIGNED AUTO_INCREMENT KEY,username VARCHAR(20) NOT NULL UNIQUE,score TINYINT UNSIGNED NOT NULL);INSERT stu(username,score) VALUES('king',95),('queen',75),('zhangsan',69),('lisi',78),('wangwu',87),('zhaoliu',88),('tianqi',98),('ceshi',99),('tiancai',50);-- 分数级别levelCREATE TABLE level(id tinyint UNSIGNED AUTO_INCREMENT KEY,score TINYINT UNSIGNED COMMENT '分数');INSERT level(score) VALUES(90),(80),(70);-- 查询出成绩优秀的学员SELECT score FROM level WHERE id=1;SELECT id,username,score FROM stuWHERE score>=(SELECT score FROM level WHERE id=1);-- 查询出没有得到评级的学员SELECT id,username,score FROM stuWHERE score<=(SELECT score FROM level WHERE id=3);-- 由EXISTS 引发的子查询SELECT * FROM emp WHERE EXISTS (SELECT depName FROM dep WHERE id=10);SELECT * FROM emp WHERE EXISTS (SELECT depName FROM dep WHERE id=1);-- 带有ANY SOME ALL关键字的子查询SELECT * FROM stuWHERE score>= ANY(SELECT score FROM level);SELECT * FROM stuWHERE score>= SOME(SELECT score FROM level);SELECT * FROM stuWHERE score>= ALL(SELECT score FROM level);SELECT * FROM stuWHERE score< ALL(SELECT score FROM level);SELECT * FROM stuWHERE score=ANY(SELECT score FROM level);SELECT * FROM stuWHERE score!=ALL(SELECT score FROM level);-- 创建一个user1表,id usernameCREATE TABLE user1(    id int UNSIGNED AUTO_INCREMENT KEY,    username VARCHAR(20))SELECT id,username FROM emp;-- 将user表中的用户名写入到user1表中INSERT user1(username) SELECT username FROM user;-- 将stu表中的tiancai用户名添加到user2表中INSERT user2 SET username=(SELECT username FROM stu WHERE id=9);-- 去掉字段的重复值SELECT DISTINCT(username) FROM user2;-- 将user1和user2数据合并到一起SELECT * FROM user1UNIONSELECT * FROM user2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-8无限级分类数据表"><a href="#3-8无限级分类数据表" class="headerlink" title="3.8无限级分类数据表"></a>3.8无限级分类数据表</h3><pre class="line-numbers language-mysql"><code class="language-mysql">-- 测试自身连接CREATE TABLE cate(    id SMALLINT UNSIGNED AUTO_INCREMENT KEY,    cateName VARCHAR(100) NOT NULL UNIQUE,    pId SMALLINT UNSIGNED NOT NULL DEFAULT 0);INSERT cate(cateName,pId) VALUES('服装',0);INSERT cate(cateName,pId) VALUES('数码',0);INSERT cate(cateName,pId) VALUES('箱包',0);INSERT cate(cateName,pId) VALUES('男装',1);INSERT cate(cateName,pId) VALUES('女装',1);INSERT cate(cateName,pId) VALUES('内衣',1);INSERT cate(cateName,pId) VALUES('电视',2);INSERT cate(cateName,pId) VALUES('冰箱',2);INSERT cate(cateName,pId) VALUES('洗衣机',2);INSERT cate(cateName,pId) VALUES('爱马仕',3);INSERT cate(cateName,pId) VALUES('LV',3);INSERT cate(cateName,pId) VALUES('GUCCI',3);INSERT cate(cateName,pId) VALUES('夹克',4);INSERT cate(cateName,pId) VALUES('衬衫',4);INSERT cate(cateName,pId) VALUES('裤子',4);INSERT cate(cateName,pId) VALUES('液晶电视',10);INSERT cate(cateName,pId) VALUES('等离子电视',10);INSERT cate(cateName,pId) VALUES('背投电视',10);-- 查询所有的分类信息，并且得到其父分类SELECT s.id,s.cateName AS sCateName,p.cateName  AS pCateNameFROM cate AS sLEFT JOIN cate AS pON s.pId=p.id;-- 查询所有的分类及其子分类SELECT p.id,p.cateName  AS pCateName,s.cateName AS sCateNameFROM cate AS sRIGHT JOIN cate AS pON s.pId=p.id;-- 查询所有的分类并且得到子分类的数目SELECT p.id,p.cateName  AS pCateName,COUNT(s.cateName) AS countFROM cate AS sRIGHT JOIN cate AS pON s.pId=p.idGROUP BY p.cateNameORDER BY id ASC;sCate 表id | cateName        | pId |+----+-----------------+-----+|  1 | 服装            |   0 ||  2 | 数码            |   0 ||  3 | 玩具            |   0 ||  4 | 男装            |   1 ||  5 | 女装            |   1 ||  6 | 内衣            |   1 || 10 | 电视            |   2 || 11 | 冰箱            |   2 || 12 | 洗衣机          |   2 || 13 | 爱马仕          |   3 || 14 | LV              |   3 || 15 | GUCCI           |   3 || 16 | 夹克            |   4 || 17 | 衬衫            |   4 || 18 | 裤子            |   4 || 19 | 液晶电视        |  10 || 20 | 等离子电视      |  10 || 21 | 背投电视        |  10pCateid | cateName        | pId |+----+-----------------+-----+|  1 | 服装            |   0 ||  2 | 数码            |   0 ||  3 | 玩具            |   0 ||  4 | 男装            |   1 ||  5 | 女装            |   1 ||  6 | 内衣            |   1 || 10 | 电视            |   2 || 11 | 冰箱            |   2 || 12 | 洗衣机          |   2 || 13 | 爱马仕          |   3 || 14 | LV              |   3 || 15 | GUCCI           |   3 || 16 | 夹克            |   4 || 17 | 衬衫            |   4 || 18 | 裤子            |   4 || 19 | 液晶电视        |  10 || 20 | 等离子电视      |  10 || 21 | 背投电视        |  10   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="4-MySQL常用函数"><a href="#4-MySQL常用函数" class="headerlink" title="4.MySQL常用函数"></a>4.MySQL常用函数</h2><h3 id="4-1数学函数"><a href="#4-1数学函数" class="headerlink" title="4.1数学函数"></a>4.1数学函数</h3><ul><li><code>CEIL()</code>:进1取整</li><li><code>FLOOR()</code>:舍掉小数部分</li><li><code>ROUND()</code>:四舍五入</li><li><code>TRUNCATE()</code>:截取小数点后几位</li><li><code>MOD()</code>:取余数</li><li><code>ABS()</code>:取绝对值</li><li><code>POWER()</code>:幂指数</li><li><code>PI()</code>:圆周率</li><li><code>RAND()</code>:随机数</li><li><code>SIGN(X)</code>:符号函数</li><li><code>EXP()</code>:计算以e为底的指数</li></ul><hr><h3 id="4-2字符串函数"><a href="#4-2字符串函数" class="headerlink" title="4.2字符串函数"></a>4.2字符串函数</h3><pre class="line-numbers language-mysql"><code class="language-mysql">-- 测试字符串函数-- CHAR_LENGTH():得到字符串的字符数SELECT CHAR_LENGTH('abc');-- LENGTH():返回字符串的长度SELECT LENGTH('abc');-- CONCAT(s1,s2,....):将字符串合并成一个字符串SELECT CONCAT('a','b','c');-- 如果字符串中包含NULL，返回拼接结果就是NULLSELECT CONCAT('a','b','c',null);-- CONCAT_WS(x,s1,s2,s2....)：以指定分隔符拼接字符串SELECT CONCAT_WS('-','a','b','c');-- 如果null在拼接的内容中，则转化成空字符串SELECT CONCAT_WS('-','a','b','c',null);-- 如果分隔符为null，拼接的结果为nullSELECT CONCAT_WS(null,'a','b','c');-- 将字符串转换成大写或者小写 UPPER()| UCASE() LOWER()|LCASE()SELECT UPPER('hello king'),UCASE('hello imooc'),LOWER('HELLO ADMIN'),LCASE('HELLO EVERYBODY');-- 字符串的反转REVERSE()SELECT REVERSE('abc');-- LEFT()|RIGHT():返回字符串的前几个字符或者后几个字符SELECT LEFT('hello',2),RIGHT('hello',2);-- LPAD()|RPAD():用字符串填充到指定长度SELECT LPAD('abc',10,'?');SELECT RPAD('abc',10,'!');-- 去掉字符串两端的空格TRIM()|LTRIM()|RTRIM():SELECT CONCAT('*',TRIM(' abc '),'*'),CONCAT('*',LTRIM(' abc '),'*'),CONCAT('*',RTRIM(' abc '),'*');-- REPEAT():重复指定的次数SELECT REPEAT('hello',3);-- REPLACE():字符串SELECT REPLACE('hello king','king','queen');-- 截取字符串SUBSTRINGSELECT SUBSTRING('abcdef',1,3);-- 比较字符串SELECT STRCMP('a','b');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-3日起时间函数"><a href="#4-3日起时间函数" class="headerlink" title="4.3日起时间函数"></a>4.3日起时间函数</h3><pre class="line-numbers language-mysql"><code class="language-mysql">-- 测试日期时间函数-- 返回当前日期SELECT CURDATE(),CURRENT_DATE();-- 返回当前时间SELECT CURTIME(),CURRENT_TIME();-- 返回当前的日期时间SELECT NOW(),CURRENT_TIMESTAMP(),SYSDATE();-- 返回日期中的月份和月份的名称SELECT MONTH('2017-02-19');SELECT MONTH(CURDATE()),MONTHNAME(CURDATE());-- 返回星期几SELECT DAYNAME(NOW());-- 返回一周内的第几天,0代表星期一SELECT DAYOFWEEK(NOW());SELECT WEEK(NOW());SELECT YEAR(NOW()),MONTH(NOW()),DAY(NOW()),HOUR(NOW()),MINUTE(NOW()),SECOND(NOW());-- DATEDIFF()计算两个日期相差的天数SELECT DATEDIFF('2020-03-06','2020-03-02');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《MySQL必知必会》</li><li><a href="https://www.imooc.com/learn/1102" target="_blank" rel="noopener">慕课网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb笔记</title>
      <link href="/2020/02/14/javaweb-bi-ji/"/>
      <url>/2020/02/14/javaweb-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb学习笔记"><a href="#JavaWeb学习笔记" class="headerlink" title="JavaWeb学习笔记"></a>JavaWeb学习笔记</h1><h2 id="1-html"><a href="#1-html" class="headerlink" title="1.html"></a>1.html</h2><h3 id="1-1元素-标签"><a href="#1-1元素-标签" class="headerlink" title="1.1元素/标签"></a>1.1元素/标签</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>开始标签[...属性]</span><span class="token punctuation">></span></span>标签内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>结束标签</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span><span class="token punctuation">></span></span>标签内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签名</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>HTML</strong>结构元素顺序</p><p><img src="0.png" alt></p><p><strong>HTML</strong>属性：</p><ul><li>属：给予元素基本标识</li><li>性：样式或描述元素特征</li></ul><hr><h3 id="1-2标题"><a href="#1-2标题" class="headerlink" title="1.2标题"></a>1.2标题</h3><p>作用：浏览器会自动附件标题样式，搜索引擎或者阅读器能够根据标题来识别，生成文档大纲</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 共有6级 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>    标题内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="1-3段落"><a href="#1-3段落" class="headerlink" title="1.3段落"></a>1.3段落</h3><p>作用：划分段落</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    段落内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ul><li>默认浏览器样式空标签也“占据一部分地方”，使用style样式就行修改</li></ul></blockquote><hr><h3 id="1-4font标签"><a href="#1-4font标签" class="headerlink" title="1.4font标签"></a>1.4font标签</h3><p>作用：格式化文本</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- size大小 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文字内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- face字体 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Helvetica<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文字内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- color颜色,三种表示方法 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#d8d8d8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rgb(168,178,188)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>只能控制字体集，大小，颜色。。。</p><p>慎用</p></blockquote><hr><h3 id="1-5链接"><a href="#1-5链接" class="headerlink" title="1.5链接"></a>1.5链接</h3><p>作用：文档内部锚点，跳转到外部文档，下载资源</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- href表示超文本引用 --></span><span class="token comment" spellcheck="true">&lt;!-- target表示页面打开的方式：_blank表示从新页面；_self表示从当前页面 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 从锚点跳转到titletThird --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#titleThird<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>锚点<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>titleThird<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 禁止跳转,通过其他方式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 去掉下划线 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span>    a{        text-decoration: none;    }    <span class="token comment" spellcheck="true">&lt;!-- 浏览记录消失 --></span>    a:visitied{        color:#333333;    }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="1-6html图像"><a href="#1-6html图像" class="headerlink" title="1.6html图像"></a>1.6html图像</h3><p>作用：插入图像</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- alt替换文本（图片无法正常显示时提示） --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片地址<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="1-7列表"><a href="#1-7列表" class="headerlink" title="1.7列表"></a>1.7列表</h3><p>作用：插入无序，有序，定义列表</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 无序,&lt;li>xxx&lt;/li>表示里面的一项 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        xxx    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 有序 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        xxx    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 列表 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>        xxx    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 解释上面的dt --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span> xx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ul><li><strong>type</strong>属性项目符号样式（disc，circle，square）  慎用</li><li>只用<ul></ul>就好</li></ul></blockquote><hr><h3 id="1-8div"><a href="#1-8div" class="headerlink" title="1.8div"></a>1.8div</h3><p>作用：布局</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="1-9块级元素和行内元素"><a href="#1-9块级元素和行内元素" class="headerlink" title="1.9块级元素和行内元素"></a>1.9块级元素和行内元素</h3><table><thead><tr><th align="center">块级元素</th><th align="center">行内元素</th></tr></thead><tbody><tr><td align="center">div</td><td align="center">span</td></tr><tr><td align="center">p</td><td align="center">strong</td></tr><tr><td align="center">form</td><td align="center">em</td></tr><tr><td align="center">ul</td><td align="center">br</td></tr><tr><td align="center">li</td><td align="center">img</td></tr><tr><td align="center">ol</td><td align="center">input</td></tr><tr><td align="center">address</td><td align="center">label</td></tr><tr><td align="center">fieldset</td><td align="center">select</td></tr><tr><td align="center">hr</td><td align="center">textarea</td></tr><tr><td align="center">menu</td><td align="center">cite</td></tr><tr><td align="center">table</td><td align="center"></td></tr></tbody></table><hr><h3 id="1-10带格式化的标签"><a href="#1-10带格式化的标签" class="headerlink" title="1.10带格式化的标签"></a>1.10带格式化的标签</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>加粗字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>另一种粗体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>big</span><span class="token punctuation">></span></span>大写字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>big</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>强调字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>斜体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>小号字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>下标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>上标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>预格式文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">></span></span>    引用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>删除线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">></span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ins</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="1-11html表格"><a href="#1-11html表格" class="headerlink" title="1.11html表格"></a>1.11html表格</h3><p>作用：布局，呈现需要表格布局的内容</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- tr行，td列，th表格头 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>学号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>学号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="1.png" alt></p><p><img src="2.png" alt></p><p><img src="3.png" alt></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>学习html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">aciton</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>文本<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男&lt;input name ="gender" value="1" type="radio">女         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>电影        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>音乐        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>美术        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multiple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- multiple size表示可见显示的选择框数量 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>鸭梨<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>樱桃<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submint<span class="token punctuation">"</span></span> <span class="token attr-name">form</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="4.png" alt></p><hr><h2 id="2-CSS"><a href="#2-CSS" class="headerlink" title="2.CSS"></a>2.CSS</h2><h3 id="2-1CSS声明"><a href="#2-1CSS声明" class="headerlink" title="2.1CSS声明"></a>2.1CSS声明</h3><p><img src="5.png" alt></p><hr><h3 id="2-2CSS内联样式"><a href="#2-2CSS内联样式" class="headerlink" title="2.2CSS内联样式"></a>2.2CSS内联样式</h3><p>仅对当前元素起作用，耦合度高</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>CSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">body</span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 内联样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>lightcoral<span class="token punctuation">;</span><span class="token property">font-weight</span><span class="token punctuation">:</span> bolder<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-3CSS外联样式"><a href="#2-3CSS外联样式" class="headerlink" title="2.3CSS外联样式"></a>2.3CSS外联样式</h3><p>第一种：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>CSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">body</span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">p</span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>lightcoral<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> bolder<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>另一段段落内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种：</p><p>新建<strong>CSS</strong>文件，进一步降低耦合度</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>CSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>另一段段落内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">p</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>lightcoral<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bolder<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：内联样式的优先级别高于外联样式</p></blockquote><hr><h3 id="2-4CSS选择器"><a href="#2-4CSS选择器" class="headerlink" title="2.4CSS选择器"></a>2.4CSS选择器</h3><p>常见的选择器：</p><ul><li><strong>ID</strong>选择器(慎用)</li><li>元素选择器(常用，匹配多个)</li><li><strong>class</strong>选择器(常用，匹配多个)</li><li>属性选择器</li></ul><blockquote><p>id属性的特点是唯一不重复</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>CSS选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token id">#p</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>lightcoral<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.myclass</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">span</span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>lightgreen<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token attribute">[title]</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>lightgray<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myclass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>另一段段落内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>this is p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="6.png" alt></p><p><img src="8.png" alt></p><h4 id="后代元素选择器："><a href="#后代元素选择器：" class="headerlink" title="后代元素选择器："></a>后代元素选择器：</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>后代选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">span</span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div span</span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span>lightcoral<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Span 1.        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Span 2.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Span 3.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="7.png" alt></p><h4 id="子类元素选择器："><a href="#子类元素选择器：" class="headerlink" title="子类元素选择器："></a>子类元素选择器：</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>子元素选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">span</span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div >span</span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span>lightcoral<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Span 1. In the div.        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Span 2. In the span that's in the div.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Span 3. Not in a div at all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="9.png" alt></p><h4 id="相邻元素选择器"><a href="#相邻元素选择器" class="headerlink" title="相邻元素选择器"></a>相邻元素选择器</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>相邻元素选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token id">#one</span> + li</span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>lightcoral<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>One<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Three<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="10.png" alt></p><hr><h3 id="2-5CSS伪类"><a href="#2-5CSS伪类" class="headerlink" title="2.5CSS伪类"></a>2.5CSS伪类</h3><p><img src="11.png" alt></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>伪类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 改变a元素链接的样式内容 --></span>        a:link{            color:lightblue;        }        a:hover{            color:lightcoral;        }        a:active{            color:lightgreen;        }        a:visited{            color:lightgray;        }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>baidu.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6CSS伪元素"><a href="#2-6CSS伪元素" class="headerlink" title="2.6CSS伪元素"></a>2.6CSS伪元素</h3><p>伪元素：</p><ul><li>::before会为当前元素创建一个子元素作为伪元素</li><li>::after用来匹配已选中元素的一个虚拟的最后子元素</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>伪元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">q<span class="token pseudo-element">::before</span></span><span class="token punctuation">{</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"&lt;&lt;"</span><span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span>lightgreen<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">q<span class="token pseudo-element">::after</span></span><span class="token punctuation">{</span>            <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">">>"</span><span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span>lightcoral<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">></span></span>引用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">></span></span>，xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>q</span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>q</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="12.png" alt></p><hr><h3 id="2-7CSS选择器的优先级别"><a href="#2-7CSS选择器的优先级别" class="headerlink" title="2.7CSS选择器的优先级别"></a>2.7CSS选择器的优先级别</h3><ul><li>外联样式：<strong>id</strong>选择器&gt;类选择器的&gt;元素选择器</li><li>内联样式的优先级别高于外联样式</li><li>!important可以提高选择器的优先级</li></ul><hr><h3 id="2-8CSS背景样式"><a href="#2-8CSS背景样式" class="headerlink" title="2.8CSS背景样式"></a>2.8CSS背景样式</h3><ul><li><strong>background</strong>:简写属性，作用将背景属性设置在一个声明中</li><li><strong>background-color</strong>:设置元素的背景颜色</li><li><strong>background-image</strong>:把图像设置为背景</li><li><strong>background-position</strong>:设置背景图像的起始位置</li><li><strong>background-repeat</strong>:设置背景图像是否重复</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>背景<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token id">#p1</span></span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightcoral<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#p2</span></span><span class="token punctuation">{</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("xxx")</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#p3</span></span><span class="token punctuation">{</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("xxx")</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">16</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">16</span>px<span class="token punctuation">;</span>            <span class="token property">background-position</span><span class="token punctuation">:</span> -<span class="token number">64</span>px -<span class="token number">80</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">body</span><span class="token punctuation">{</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url("")</span><span class="token punctuation">;</span>            <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-9CSS文本样式"><a href="#2-9CSS文本样式" class="headerlink" title="2.9CSS文本样式"></a>2.9CSS文本样式</h3><ul><li><strong>color</strong>:设置文本颜色</li><li><strong>text-align</strong>:对齐元素中的文本</li><li><strong>text-indent</strong>:缩进元素中文本的首行</li><li><strong>text-decoration</strong>:向文本添加修饰</li><li><strong>vertical-align</strong>:设置元素的垂直对齐</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token id">#p1</span></span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>lightcoral<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#p2</span></span><span class="token punctuation">{</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#p3</span></span><span class="token punctuation">{</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#p4</span></span><span class="token punctuation">{</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">a</span><span class="token punctuation">{</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#p5</span></span><span class="token punctuation">{</span>            <span class="token property">text-indent</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落内容1.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    段落内容2.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落内容3.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落内容4.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>段落5.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-10CSS字体样式"><a href="#2-10CSS字体样式" class="headerlink" title="2.10CSS字体样式"></a>2.10CSS字体样式</h3><p>字体：</p><ul><li><strong>font</strong>:在一个声明中设置所有的字体属性</li><li><strong>font-family</strong>:指定文本的字体系列</li><li><strong>font-size</strong>:指定文本的字体大小</li><li><strong>font-style</strong>:指定文本的字体样式</li><li><strong>font-weight</strong>:指定字体的粗细</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token comment" spellcheck="true">/* 设置字体系列 */</span>        <span class="token selector"><span class="token id">#p1</span> </span><span class="token punctuation">{</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Times New Roman"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 设置自定义字体系列 */</span>        <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'FontAwesome'</span><span class="token punctuation">;</span>            <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('font/fontawesome-webfont.eot?v=3.2.1')</span><span class="token punctuation">;</span>            <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('font/fontawesome-webfont.eot?#iefix&amp;v=3.2.1')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>, <span class="token url">url('../font/fontawesome-webfont.woff?v=3.2.1')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>, <span class="token url">url('../font/fontawesome-webfont.ttf?v=3.2.1')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>, <span class="token url">url('../font/fontawesome-webfont.svg#fontawesomeregular?v=3.2.1')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>            <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#p2</span> </span><span class="token punctuation">{</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> FontAwesome<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#p3</span> </span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> larger<span class="token punctuation">;</span>            <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is text.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this is text too.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个段落内容.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-11CSS列表样式"><a href="#2-11CSS列表样式" class="headerlink" title="2.11CSS列表样式"></a>2.11CSS列表样式</h3><p>列表：</p><ul><li><strong>list-style</strong>:用于把所有用于列表的属性设置于一个声明中</li><li><strong>list-style-image</strong>:将图像设置为列表项标志</li><li><strong>list-style-type</strong>:设置列表项标志的类型</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token comment" spellcheck="true">/* 设置列表项的预定义样式 */</span>        <span class="token selector"><span class="token id">#u1</span> </span><span class="token punctuation">{</span>            <span class="token property">list-style-type</span><span class="token punctuation">:</span> decimal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 设置列表项的图片样式 */</span>        <span class="token selector"><span class="token id">#u2</span> </span><span class="token punctuation">{</span>            <span class="token property">list-style-image</span><span class="token punctuation">:</span> <span class="token url">url("imgs/mac.png")</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 设置列表项水平方向排列 */</span>        <span class="token selector"><span class="token id">#u3</span> </span><span class="token punctuation">{</span>            <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#u3</span>>li </span><span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>西瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>西瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>西瓜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-12CSS表格"><a href="#2-12CSS表格" class="headerlink" title="2.12CSS表格"></a>2.12CSS表格</h3><p>表格：</p><ul><li><strong>border</strong>:设置表格边框</li><li><strong>border-collapse</strong>:设置表格的边框是否被折叠成一个单一的边框或隔开</li><li><strong>width</strong>:定义表格的宽度</li><li><strong>text-align</strong>:表格中的文本对齐</li><li><strong>padding</strong>:设置表格中的填充</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">table, th, td </span><span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid lightslategray<span class="token punctuation">;</span>            <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">table </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80%</span><span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span>px auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">table th </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightcoral<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">table th, table td </span><span class="token punctuation">{</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.info</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>职位<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>收入<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>张无忌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>老板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>100000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>小昭<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>秘书<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>10000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>周芷若<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>主管<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>20000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-13CSS布局"><a href="#2-13CSS布局" class="headerlink" title="2.13CSS布局"></a>2.13CSS布局</h3><ul><li>两行三列布局</li><li>三行两列布局</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>两行三列布局<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">html, body </span><span class="token punctuation">{</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">header </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token id">#container</span> </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightgreen<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">nav </span><span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightyellow<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">aside </span><span class="token punctuation">{</span>            <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">article </span><span class="token punctuation">{</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightcoral<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-14CSS盒子模型"><a href="#2-14CSS盒子模型" class="headerlink" title="2.14CSS盒子模型"></a>2.14CSS盒子模型</h3><p><img src="13.png" alt></p><p>边框：</p><ul><li><strong>border</strong>:简写属性把针对四个边的属性设置在一个声明</li><li><strong>border-style</strong>:用于设置元素所有边框的样式，或者单独地为各边设置边框样式</li><li><strong>border-width</strong>:用于为元素所有边框设置宽度，或者单独地为各边框设置宽度</li><li><strong>border-color</strong>:设置元素的所有边框中可见部分的颜色，或为4个边分别设置颜色</li></ul><p>内边距：</p><ul><li><strong>padding</strong>:使用缩写属性设置在一个声明中的所有填充属性</li><li><strong>padding-bottom</strong>:设置元素的底部填充</li><li><strong>padding-left</strong>:设置元素的左部填充</li><li><strong>padding-right</strong>:设置元素的右部填充</li><li><strong>padding-top</strong>:设置元素的顶部填充</li></ul><p>外边距：</p><ul><li><strong>margin</strong>:简写属性。在一个声明中设置所有外边距属性</li><li><strong>margin-bottom</strong>:设置元素的下外边距</li><li><strong>margin-left</strong>:设置元素的左外边距</li><li><strong>margin-right</strong>:设置元素的右外边距</li><li><strong>margin-top</strong>:设置元素的上外边距</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda学习笔记</title>
      <link href="/2020/02/12/lambda-biao-da-shi/"/>
      <url>/2020/02/12/lambda-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p>函数式接口，是只包含一个抽象接口方法的特殊接口。</p><p>语义化检测注解：<strong>@FunctionalInterface</strong></p><p>以下三种方法不会影响函数式接口的方法：</p><ul><li>默认方法</li><li>静态方法</li><li>继承<strong>Object</strong>类的方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    String <span class="token function">foarmat</span><span class="token punctuation">(</span>String name <span class="token punctuation">,</span>String format<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>下面构建一个案例，给定用户的身份信息，进行身份验证和消息格式化。</p><p>首先定义一个<strong>IUserCredential</strong>身份验证接口，<strong>IMessageFormat</strong>消息格式化接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 用户身份认证标记接口 */</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserCredential</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过用户账号，验证用户身份信息的接口     * @param username 要验证的用户账号     * @return 返回身份信息[系统管理员、用户管理员、普通用户]     */</span>    String <span class="token function">verifyUser</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  boolean test();  //false,@FunctionalInterface注解检查不通过，只能包含一个抽象方法</span>    <span class="token keyword">default</span> String <span class="token function">getCredential</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 模拟方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"admin + 系统管理员用户"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"manager"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"manager + 用户管理员用户"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"commons + 普通会员用户"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 消息传输格式化转换接口 */</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMessageFormat</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 消息转换方法     * @param message 要转换的消息     * @param format 转换的格式[xml/json..]     * @return 返回转换后的数据     */</span>    String <span class="token function">format</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span> String format<span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//继承自Object类的方法，通过@FunctionalInterface注解检查</span>    <span class="token comment" spellcheck="true">/**     * 静态方法  消息合法性验证方法     * @param msg 要验证的消息     * @return 返回验证结果     */</span>    <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">verifyMessage</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来定义<strong>IUserCredential</strong>的实现类<strong>UserCredentialImpl</strong>，<strong>IMessageFormat</strong>的实现类<strong>MessageFormatImpl</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserCredentialImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserCredential</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">verifyUser</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"系统管理员"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"manager"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"用户管理员"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"普通会员"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageFormatImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IMessageFormat</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">format</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span> String format<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息转换..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-默认方法"><a href="#1-默认方法" class="headerlink" title="1.默认方法"></a>1.默认方法</h2><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/*            1. 默认方法            如果实现公共类扩展的方法，可以在在接口中定义默认方法        */</span>         IUserCredential ic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserCredentialImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ic<span class="token punctuation">.</span><span class="token function">verifyUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ic<span class="token punctuation">.</span><span class="token function">getCredential</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="2-静态方法"><a href="#2-静态方法" class="headerlink" title="2.静态方法"></a>2.静态方法</h2><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/*            2. 静态方法            在实现公共类进行消息格式转换时，可以先对其消息进行检查            如果消息不合法，直接跳过消息格式转换，这样就会提高代码效率        */</span>        String msg <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>IMessageFormat<span class="token punctuation">.</span><span class="token function">verifyMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            IMessageFormat format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageFormatImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            format<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-匿名内部类"><a href="#3-匿名内部类" class="headerlink" title="3.匿名内部类"></a>3.匿名内部类</h2><pre class="line-numbers language-java"><code class="language-java">       <span class="token comment" spellcheck="true">/*             3.匿名内部类，实现接口的抽象方法              相比与新建一个实现类通过多态(接口->实现类)，代码更加简洁       */</span>         IUserCredential ic2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IUserCredential</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">verifyUser</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"管理员"</span><span class="token operator">:</span><span class="token string">"会员"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ic2<span class="token punctuation">.</span><span class="token function">verifyUser</span><span class="token punctuation">(</span><span class="token string">"manager"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ic2<span class="token punctuation">.</span><span class="token function">verifyUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="4-lambda表达式针对函数式接口的实现"><a href="#4-lambda表达式针对函数式接口的实现" class="headerlink" title="4.lambda表达式针对函数式接口的实现"></a>4.lambda表达式针对函数式接口的实现</h2><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/*            4. lambda表达式，针对函数式接口的简单实现                语义上比匿名内部类更加简洁        */</span>        IUserCredential ic3 <span class="token operator">=</span> <span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"lbd管理员"</span><span class="token operator">:</span> <span class="token string">"lbd会员"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ic3<span class="token punctuation">.</span><span class="token function">verifyUser</span><span class="token punctuation">(</span><span class="token string">"manager"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ic3<span class="token punctuation">.</span><span class="token function">verifyUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="Java系统内建函数式接口"><a href="#Java系统内建函数式接口" class="headerlink" title="Java系统内建函数式接口"></a>Java系统内建函数式接口</h1><p>在<strong>Java</strong>存在大量符合函数式接口定义的接口：</p><ul><li><code>java.lang.Runable</code></li><li><code>java.lang.Comparable</code></li><li><code>java.lang.Comparator</code></li><li><code>java.io.FileFilter</code></li></ul><p>在<strong>JDK8</strong>在提供了<code>java.util.function</code>包，提供了大量常用的函数式接口</p><ul><li><code>java.util.function.Predicate&lt;T&gt;</code>:接受参数对象<strong>T</strong>，返回一个<strong>boolean</strong>类型结果</li><li><code>java.util.function.Comsumer&lt;T&gt;</code>：接受参数对象<strong>T</strong>，不返回结果</li><li><code>java.util.function.Function&lt;T,R&gt;</code>：接受参数对象<strong>T</strong>，返回结果对象<strong>R</strong></li><li><code>java.util.fuction.Supplier&lt;T&gt;</code>：不接收参数，提供<strong>T</strong>对象的创建工厂</li><li><code>java.util.function.UnaryOperator&lt;T&gt;</code>：接收参数对象<strong>T</strong>，返回结果对象<strong>T</strong></li><li><code>java.util.fuction.BinaryOperator&lt;T&gt;</code>：接受两个<strong>T</strong>对象，返回一个<strong>T</strong>结果对象</li></ul><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/*        predicate源码        @FunctionalInterface        public interface Predicate&lt;T> {            boolean test(T var1);            ...            一些默认方法            }        */</span>        <span class="token comment" spellcheck="true">//一些实际案例</span>        Predicate<span class="token operator">&lt;</span>String<span class="token operator">></span> pre <span class="token operator">=</span> <span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"manager"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span>        Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> con <span class="token operator">=</span> <span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"要发送的消息："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消息发送完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"hello.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"imooc lambda expression."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> fun <span class="token operator">=</span> <span class="token punctuation">(</span>String gender<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"male"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>gender<span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"male"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"female"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Supplier<span class="token operator">&lt;</span>String<span class="token operator">></span> sup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UnaryOperator<span class="token operator">&lt;</span>String<span class="token operator">></span> uo <span class="token operator">=</span> <span class="token punctuation">(</span>String img<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            img <span class="token operator">+=</span> <span class="token string">"[100x200]"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> img<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uo<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"原图--"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//原图--[100x200]</span>        BinaryOperator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> bo <span class="token operator">=</span> <span class="token punctuation">(</span>Integer i1<span class="token punctuation">,</span> Integer i2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i1 <span class="token operator">></span> i2<span class="token operator">?</span> i1<span class="token operator">:</span> i2<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bo<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><p><strong>Lambda</strong>表达式被称为箭头函数，匿名函数，闭包。</p><p><strong>Lambda</strong>表达式体现的是轻量级函数式接口编程思想。</p><p><strong>Lambda</strong>表达式必须与接口进行绑定。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>expression<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//参数可推导，代码只有一行可省略{}，return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="变量捕获"><a href="#变量捕获" class="headerlink" title="变量捕获"></a>变量捕获</h2><h3 id="匿名内部类中的变量捕获"><a href="#匿名内部类中的变量捕获" class="headerlink" title="匿名内部类中的变量捕获"></a>匿名内部类中的变量捕获</h3><pre class="line-numbers language-java"><code class="language-java">    String s1 <span class="token operator">=</span> <span class="token string">"全局变量"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s2 <span class="token operator">=</span> <span class="token string">"局部变量"</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String s3 <span class="token operator">=</span> <span class="token string">"内部变量"</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 访问全局变量</span><span class="token comment" spellcheck="true">//                System.out.println(this.s1);// this关键字~表示是当前内部类型的对象  false</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 局部变量的访问，~不能对局部变量进行数据的修改[final]</span><span class="token comment" spellcheck="true">//              s2 = "hello"; //false</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Lambda表达式中的变量捕获"><a href="#Lambda表达式中的变量捕获" class="headerlink" title="Lambda表达式中的变量捕获"></a>Lambda表达式中的变量捕获</h3><pre class="line-numbers language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"全局变量"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s2 <span class="token operator">=</span> <span class="token string">"局部变量lambda"</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            String s3 <span class="token operator">=</span> <span class="token string">"内部变量lambda"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 访问全局变量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// this关键字，表示的就是所属方法所在类型的对象</span>            <span class="token comment" spellcheck="true">// 访问局部变量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            s2 = "hello";// 不能进行数据修改，默认推导变量的修饰符：final</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>            s3 <span class="token operator">=</span> <span class="token string">"labmda 内部变量直接修改"</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Lambda</strong>表达式优化了匿名内部类中的<strong>this</strong>关键字，不再单独建立对象作用域</li></ul><h2 id="方法重载和Lambda表达式"><a href="#方法重载和Lambda表达式" class="headerlink" title="方法重载和Lambda表达式"></a>方法重载和Lambda表达式</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">Param1</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">outInfo</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">Param2</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">outInfo</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义重载的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambdaMethod</span><span class="token punctuation">(</span>Param1 param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        param<span class="token punctuation">.</span><span class="token function">outInfo</span><span class="token punctuation">(</span><span class="token string">"hello param1 imooc!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambdaMethod</span><span class="token punctuation">(</span>Param2 param<span class="token punctuation">)</span> <span class="token punctuation">{</span>        param<span class="token punctuation">.</span><span class="token function">outInfo</span><span class="token punctuation">(</span><span class="token string">"hello param2 imooc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Test app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">lambdaMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Param1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">outInfo</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">lambdaMethod</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Param2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">outInfo</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        lambda表达式存在类型检查-> 自动推导lambda表达式的目标类型        lambdaMethod() -> 方法 -> 重载方法                -> Param1  函数式接口                -> Param2  函数式接口                调用方法-> 传递Lambda表达式-> 自动推导->                    -> Param1 | Param2         */</span>        <span class="token comment" spellcheck="true">//false</span>        app<span class="token punctuation">.</span><span class="token function">lambdaMethod</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>String info<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>当存在方法重载时，参数列表中含有函数式接口，使用匿名内部类</p><p><strong>Jvm</strong>无法通过自动推导得到接口参数类型</p></li></ul><hr><h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><p>方法引用是结合<strong>Lambda</strong>表达式的一种语法特性。</p><ul><li><p>静态方法引用</p><pre class="line-numbers language-java"><code class="language-java">类型<span class="token punctuation">.</span>方法名称<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> 类型名称<span class="token operator">:</span><span class="token operator">:</span>方法名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>实例方法引用</p><pre class="line-numbers language-java"><code class="language-java">创建类型对应的一个对象 <span class="token operator">--</span><span class="token operator">></span> 对象引用<span class="token operator">:</span><span class="token operator">:</span>实例方法名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>构造方法引用（需要绑定函数式接口）</p></li></ul><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token keyword">private</span> String gender<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 静态方法引用</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compareByAge</span><span class="token punctuation">(</span>Person p1<span class="token punctuation">,</span> Person p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">PersonUtil</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 实例方法引用</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">comprareByName</span><span class="token punctuation">(</span>Person p1<span class="token punctuation">,</span> Person p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">interface</span> <span class="token class-name">IPerson</span> <span class="token punctuation">{</span>      Person <span class="token function">getPerson</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String gender<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          List<span class="token operator">&lt;</span>Person<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"shuke"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"jerry"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"beita"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 匿名内部类实现</span>          Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Person o1<span class="token punctuation">,</span> Person o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//lambda表达式实现</span>          Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> p2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//静态方法引用实现</span>          Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> Person<span class="token operator">:</span><span class="token operator">:</span>compareByAge<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 实例方法引用</span>          PersonUtil pu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> pu<span class="token operator">:</span><span class="token operator">:</span>comprareByName<span class="token punctuation">)</span><span class="token punctuation">;</span>          list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//构造方法引用</span>          IPerson p1 <span class="token operator">=</span> Person<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>          Person person <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.imooc.com/course/introduction/id/1196" target="_blank" rel="noopener">慕课网</a></li><li><strong>Java核心技术</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lambda </tag>
            
            <tag> 函数式接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java引用探析</title>
      <link href="/2020/02/11/java-yin-yong-tan-xi/"/>
      <url>/2020/02/11/java-yin-yong-tan-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java引用探析"><a href="#Java引用探析" class="headerlink" title="Java引用探析"></a>Java引用探析</h1><p>在<strong>Java</strong>中除基本数据类型外，其他都是指向各类对象的引用。根据生命周期的长短，可将引用分为强引用，软引用，弱引用，幻象引用。不同的引用类型体现在对象不同的可达性和垃圾收集的影响。</p><h2 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h2><p>强引用就是我们通常创建对象实例的方式。通过<strong>new</strong>关键字创建对象的引用，当<strong>Jvm</strong>内存不足时，宁愿抛出<strong>OOM（OutOfMemoryError）</strong>，也不会强制通过回收强引用对象来解决内存不足的问题。对于一个普通对象而言，如果没有其他引用关系，只要超过了引用的作用域或者显式地将相应强引用赋值为<strong>null</strong>，这种情况下，就可以被<strong>GC</strong>处理(具体情况要看垃圾回收策略)。</p><pre class="line-numbers language-java"><code class="language-java">Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h2><p>软引用需要由<code>SoftReference</code>类实现，软引用相比于强引用较弱。当<strong>Jvm</strong>内存不足时，它就会试图回收软引用指向的对象。这种回收会在<strong>OOM</strong>之前发生。</p><p>软引用通常用来实现一些内存敏感的缓存，如果存在空闲内存，就可以暂时保留这些缓存。当内存</p><p>要溢出时就会试图回收这部分软引用对象。</p><pre class="line-numbers language-java"><code class="language-java">Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SoftReference softobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>Object o <span class="token operator">=</span> softobj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h2><p>弱引用通过<code>WeakReference</code>类实现。弱引用生命周期相较于软引用更短。在<strong>GC</strong>扫描管辖的内存区域时，一旦发现了具有弱引用的对象，无论内存空间是否足够，都会回收它的内存。</p><p>如果试图获取的对象还存在，就使用它，否则就重新实例化。</p><p>许多缓存技术的选择。</p><pre class="line-numbers language-java"><code class="language-java">Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WeakReference Weakobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>Object o <span class="token operator">=</span> Weakobj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="幻象引用"><a href="#幻象引用" class="headerlink" title="幻象引用"></a>幻象引用</h2><p>幻象引用通过<code>PhantomRerference</code>类实现。无法通过幻象引用访问对象的任何属性和方法。幻象引用仅仅是提供了一种确保对象被<strong>finalize</strong>之后，做某些事情的机制。</p><p>如果一个对象仅持有幻象引用，那么就等同于没有任何引用，在任何时候都可能被<strong>GC</strong>回收。</p><p>幻象引用可用来跟踪对象被<strong>GC</strong>回收的活动，当一个幻想引用被<strong>GC</strong>回收之前，系统会收到一条通知。</p><pre class="line-numbers language-java"><code class="language-java">Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>PhantomReference phantomobj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomRerence</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>Object o <span class="token operator">=</span> phantomobj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="对象可达性状态"><a href="#对象可达性状态" class="headerlink" title="对象可达性状态"></a>对象可达性状态</h2><p><img src="0.png" alt></p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://time.geekbang.org/column/intro/82" target="_blank" rel="noopener">Java核心技术36讲</a></li><li><a href="https://www.cnblogs.com/huajiezh/p/5835618.html" target="_blank" rel="noopener">空谷幽澜</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reference </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习笔记</title>
      <link href="/2020/02/11/springboot-xue-xi-bi-ji/"/>
      <url>/2020/02/11/springboot-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven学习笔记</title>
      <link href="/2020/02/10/maven-xue-xi-bi-ji/"/>
      <url>/2020/02/10/maven-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven学习笔记"><a href="#Maven学习笔记" class="headerlink" title="Maven学习笔记"></a>Maven学习笔记</h1><h2 id="1-Maven介绍以及环境搭建"><a href="#1-Maven介绍以及环境搭建" class="headerlink" title="1.Maven介绍以及环境搭建"></a>1.Maven介绍以及环境搭建</h2><p><strong>Maven</strong>是基于项目对象模型(<strong>POM</strong>)，可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。</p><p>首先到<a href="http://Maven.apache.org/" target="_blank" rel="noopener">官网</a>下载<strong>Apache Maven 3.6.3</strong>版本</p><p><img src="0.png" alt></p><p>在本地下面解压</p><p><img src="1.png" alt></p><p>得到四个文件夹：</p><ul><li><strong>bin</strong>目录包含<strong>Maven</strong>的运行脚本</li><li><strong>boot</strong>目录包含一个类加载器的框架</li><li><strong>conf</strong>是配置文件目录</li><li><strong>lib</strong>是<strong>Maven</strong>依赖的类库</li></ul><p>接下来配置环境变量，在系统变量中设置变量名和变量值，变量值为<strong>Maven</strong>安装目录</p><p><img src="2.png" alt></p><p>接下来在环境变量<strong>path</strong>中添加以下信息</p><p><img src="3.png" alt></p><p>验证<strong>Maven</strong>是否安装成功，打开cmd命令窗口：输入<strong>mvn -v</strong>。如果得到以下配置信息，则说明安装成功。</p><p><img src="4.png" alt></p><hr><h2 id="2-Maven结构以及案例"><a href="#2-Maven结构以及案例" class="headerlink" title="2.Maven结构以及案例"></a>2.Maven结构以及案例</h2><p><strong>Maven</strong>默认的文件结构为：</p><p><img src="5.png" alt></p><p>按照文件结构创建<strong>HelloWorld</strong>类，以及<strong>HelloWorldTest</strong>测试类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldTest</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用junit框架测试</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置<strong>Maven01</strong>目录下配置<strong>pom.xml</strong>文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://Maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://Maven.apache.org/POM/4.0.0http://Maven.apache.org/Maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>com-model<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开<strong>cmd</strong>命令窗口，<strong>cd</strong>到<strong>Maven01</strong>目录下，输入命令：<strong>mvn compile</strong></p><p><img src="6.png" alt></p><p>下面测试一下，输入<strong>mvn test</strong></p><p><img src="7.png" alt></p><p>输入<strong>mvn package</strong>，此时在<strong>Maven01</strong>目录下生成一个<strong>target</strong>文件夹</p><p><img src="8.png" alt></p><p><strong>常用命令总结</strong></p><table><thead><tr><th align="center">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">mvn eclipse:eclipse</td><td align="center">生成eclipse项目结构</td></tr><tr><td align="center">mvn idea:idea</td><td align="center">生成idea项目结构</td></tr><tr><td align="center">mvn compile</td><td align="center">编译源代码</td></tr><tr><td align="center">mvn test</td><td align="center">运行测试代码</td></tr><tr><td align="center">mvn package</td><td align="center">打包项目</td></tr><tr><td align="center">mvn clean</td><td align="center">清除项目</td></tr><tr><td align="center">mvn -e</td><td align="center">查看错误详细信息</td></tr><tr><td align="center">mvn install</td><td align="center">安装jar包到本地仓库中</td></tr></tbody></table><hr><h2 id="3-Maven自动创建目录骨架"><a href="#3-Maven自动创建目录骨架" class="headerlink" title="3.Maven自动创建目录骨架"></a>3.Maven自动创建目录骨架</h2><p><strong>Archetype</strong>是<strong>Maven</strong>项目的模板工具包</p><p><strong>Maven Archetype</strong>由下面几个模板组成：</p><ul><li>maven-archetype-plugin:Archetype插件</li><li>archetype-packaging:用于描述archetype的生命周期与构建的项目软件包</li><li>archetype-models:用于描述类与引用</li><li>archetype-common:核心类</li><li>archetype-testing:用于测试Maven Archetype的内部组件</li></ul><p>使用<strong>Maven archetype:generate</strong>来创建项目骨架</p><pre class="line-numbers language-cmd"><code class="language-cmd">mvn archetype:generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>依次创建项目的<strong>groupId,artifaceId,version,package</strong></p><pre class="line-numbers language-cdm"><code class="language-cdm">Confirm properties configuration:groupId: code.Maven02artifactId: Maven02-serviceversion: 1.0.0package: code.Maven02.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建目录的两种方式</strong>:</p><ul><li><p>archetype:generate 按照提示进行选择</p></li><li><p>archetype:generate -DgroupId=组织名,公司网址的反写+项目名</p><p>​                                    -DartifactId=项目名-模块名</p><p>​                                    -Dversion=版本号</p><p>​                                    -Dpackage=代码所存在的包名</p></li></ul><hr><h2 id="4-Maven中的坐标和仓库"><a href="#4-Maven中的坐标和仓库" class="headerlink" title="4.Maven中的坐标和仓库"></a>4.Maven中的坐标和仓库</h2><p><strong>Maven</strong>中任何构件都是由坐标标识</p><p>仓库：</p><ul><li>本地仓库</li><li>远程仓库</li></ul><p>本地仓库位置：C:\Users\logic.m2\repository     logic为本机用户名</p><p>更改本地仓库默认位置：</p><p>在新建一个<strong>repo</strong>文件夹，在D:\maven\apache-maven-3.6.3\conf下修改<strong>settings.xml</strong></p><p><img src="9.png" alt></p><hr><h2 id="5-IDEA中创建Maven项目"><a href="#5-IDEA中创建Maven项目" class="headerlink" title="5.IDEA中创建Maven项目"></a>5.IDEA中创建Maven项目</h2><p>首先打开<strong>IDEA</strong>，点击<strong>setting</strong>，修改<strong>Maven</strong>仓库和配置信息</p><p><img src="10.png" alt></p><p>新建项目，打开<strong>Maven</strong>窗口配置信息</p><p><img src="11.png" alt></p><p><img src="12.png" alt></p><p>第一次创建<strong>Maven</strong>项目要配置相关信息，所以要等待一会。</p><hr><h2 id="6-Maven的生命周期"><a href="#6-Maven的生命周期" class="headerlink" title="6.Maven的生命周期"></a>6.Maven的生命周期</h2><p>完整的项目构建过程包括：</p><p>清理，编译，测试，打包，集成测试，验证，部署</p><p><strong>Maven</strong>生命周期：</p><ul><li><p><strong>clean</strong> 清理项目</p><ul><li><strong>pre-clean</strong> 执行清理前的工作</li><li><strong>clean</strong>清理上一次构建生成的所有文件</li></ul></li><li><p><strong>default</strong>(最核心)构建项目</p><ul><li><em><em>compile  test  package  install  </em></em></li></ul></li><li><p><strong>site</strong> 生成项目站点</p><ul><li><strong>pre-site</strong> 在生成项目站点前要完成的工作</li><li><strong>site</strong> 生成项目的站点文档</li><li><strong>post-site</strong> 在生成项目站点后要完成的工作</li><li><strong>site-deploy</strong> 发布生成的站点到服务器</li></ul></li></ul><hr><h2 id="7-pom-xml解析"><a href="#7-pom-xml解析" class="headerlink" title="7.pom.xml解析"></a>7.pom.xml解析</h2><p><img src="13.png" alt></p><hr>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Java反射机制</title>
      <link href="/2020/02/10/qian-tan-java-fan-she-ji-zhi/"/>
      <url>/2020/02/10/qian-tan-java-fan-she-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射是指能够分析类能力的程序，就是把<strong>java</strong>类中的各种成分映射成<strong>java</strong>对象。反射被称为框架设计的灵魂，对于一个任意的类，能够知道这个类的所有<strong>Field，Method，Constructor</strong>。对于一个实例对象也是如此，动态获取信息以及动态调用对象的方法。</p><ul><li>在运行时分析类的能力</li><li>在运行是查看对象</li></ul><hr><h2 id="获取Class类"><a href="#获取Class类" class="headerlink" title="获取Class类"></a>获取Class类</h2><p>任何一个类都是<strong>Class</strong>类的实例对象，这个实例对象有三种表示方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    第一种表达方式， 类名 对象 = 类名.class    任何一个类都有一个隐含的静态成员变量class*/</span>Class <span class="token class-name">c1</span> <span class="token operator">=</span> Employee<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已经定义了一个Employee类</span><span class="token comment" spellcheck="true">/*    第二种方式， 通过该类的对象调用getClass方法    那么首先需要创建一个Employee的实例对象*/</span>Employee e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">c2</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    c1,c2表示Employee类的类类型（class type）*/</span><span class="token comment" spellcheck="true">/*    第三种方式， Class c3 = Class.forName(String className)    此参数字符串必须是真实路径，就是带包名的类路径，包名.类名    Employee类code包下,需要注意的是该方法有异常ClassNotFoundException抛出，    需要声明该异常*/</span><span class="token keyword">class</span> <span class="token class-name">c3</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"code.Employee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    常用方法newInstance(),可以动态创建一个类的实例    查看源码发现newInstance()自Java9被标记不推荐使用    改为使用c1.getDeclaredConstructor().newInstance()，同样需要抛出异常*/</span>e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ul><li><strong>c1,c2,c3</strong>的内存地址是相同的，一个类只产生一个<strong>class</strong>对象，由<strong>jvm</strong>自动创建。</li><li><strong><code>Class.forName(String className)</code></strong>代表了动态加载类。编译时刻加载类是静态加载类，例如<strong>new</strong>实例对象，而运行时刻加载类是动态加载类。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//动态加载类，在运行时刻加载</span>Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    这里有个设计技巧，可以实现一个公共接口People，这样就不用关心args[0]传入的    具体类实现*/</span>People a <span class="token operator">=</span> <span class="token punctuation">(</span>People<span class="token punctuation">)</span>c<span class="token punctuation">.</span>getDeclaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><hr><h2 id="获取Method信息"><a href="#获取Method信息" class="headerlink" title="获取Method信息"></a>获取Method信息</h2><ul><li><strong>Class</strong>类的<code>getMethods()</code>方法获取所有的<strong>public</strong>函数，包括父类继承的。返回<strong>Method[]</strong></li><li><strong>Class</strong>类的<code>getDeclaredMethods()</code>获取所有该类声明的方法，不管访问权限</li><li><strong>Class</strong>类的<code>getName()</code>方法得到用于描述构造器，方法和域名的的字符串</li><li><strong>Method</strong>类的<code>getReturnType()</code>得到方法的返回值类型</li><li><strong>Method</strong>类的<code>getName()</code>得到方法的名称</li><li><strong>Method</strong>类的<code>getParameterType()</code>得到参数列表的类型的类类型</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//得到一个Class类</span>Class <span class="token class-name">c</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method<span class="token punctuation">[</span><span class="token punctuation">]</span> m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">returnType</span> <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String a <span class="token operator">=</span> returnType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="获取Field信息"><a href="#获取Field信息" class="headerlink" title="获取Field信息"></a>获取Field信息</h2><ul><li><strong>Class</strong>类的<code>getFields()</code>方法获取的是所有的<strong>public</strong>的成员变量的信息。返回<strong>Field[]</strong></li><li><strong>Class</strong>类的<code>getDeclaredFields()</code>方法获取的是该类自己声明的成员变量的信息</li><li><strong>Class</strong>类的<code>getConstructors()</code>方法获取的是所有<strong>public</strong>的构造函数</li><li><strong>Class</strong>类的<code>getDeclaredConstructors()</code>方法获取的是所有的构造函数</li><li><strong>Field</strong>类的<code>getType()</code>方法得到变量的类型的类类型</li><li><strong>Field</strong>类<code>getName()</code>方法得到成员变量的名称</li></ul><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">c</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Field<span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到成员变量的类型的类类型</span>Class <span class="token class-name">filedType</span> <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String typeName <span class="token operator">=</span> filedType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到成员变量的名称</span>String fieldName <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变</p><hr><h2 id="Method的反射操作"><a href="#Method的反射操作" class="headerlink" title="Method的反射操作"></a>Method的反射操作</h2><p>方法的反射操作：<code>method.invoke</code>（对象，参数列表）</p><pre class="line-numbers language-java"><code class="language-java">Class <span class="token class-name">c</span> <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"setAge"</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法如果没有返回值返回null，有返回值的返回具体的返回值</span>Object o <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="泛型的本质（通过反射越过泛型检查）"><a href="#泛型的本质（通过反射越过泛型检查）" class="headerlink" title="泛型的本质（通过反射越过泛型检查）"></a>泛型的本质（通过反射越过泛型检查）</h2><p>首先看如下例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    list1.add(20)是错误的，因为集合的泛型是防止错误输入的，是在编译时有效，绕过编译就无效了    */</span>ArrayList list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//c1 == c2是true，这说明反射的操作是编译之后的操作</span>Class <span class="token class-name">c1</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">c2</span> <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此我们可以通过方法的反射来操作，绕过编译</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><strong>Java核心技术</strong></li><li><a href="https://blog.csdn.net/sinat_38259539/article/details/71799078" target="_blank" rel="noopener">敬业的小码哥的博客</a></li><li><a href="http://www.imooc.com/learn/199" target="_blank" rel="noopener">慕课网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-118.杨辉三角</title>
      <link href="/2020/02/09/leetcode-118-yang-hui-san-jiao/"/>
      <url>/2020/02/09/leetcode-118-yang-hui-san-jiao/</url>
      
        <content type="html"><![CDATA[<h1 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h1><p>给定一个非负整数$numRows$，生成杨辉三角$numRows$行。</p><p>在杨辉三角中，每个数是它左上方和右上方的数之和。</p><pre class="line-numbers language-git"><code class="language-git">输入: 5输出:[     [1],    [1,1],   [1,2,1],  [1,3,3,1], [1,4,6,4,1]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>递归的关键设计在于：</p><ul><li>递归终止条件</li><li>递归方程的描述</li><li>求解问题能够被简化为更小的规模</li></ul><p>对关于杨辉三角这个问题，通过分析我们可以得出：</p><p>对于第$numRows$行的元素，它其实是依赖于第$numRows-1$行的元素，只是它的第一个和最后一个元素为1，而其他元素为第$numRows-1$上所对应的左上方和右上方的元素之和。这样我们可以把递归关系就可以用一个循环语句来实现。其次，我们需要定义递归的出口，当$numRows=1$时，那么只需要加入1即可；对于$numRows=0$时，则不需要加入任何元素。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> dg  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//递归出口，第0层直接返回，不需要</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> dg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//递归出口,第一层时加入元素1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> dg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dg <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归numRows层数</span>        <span class="token comment" spellcheck="true">//递归实际操作</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加第一个元素1</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numRows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>dg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numRows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加最后一个元素1</span>        dg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划的关键：</p><ul><li>状态转移</li><li>状态转移方程</li><li>能够用状态转移方程自底向上求解问题</li></ul><p>对于杨辉三角这个问题，我们通过分析可以得到：</p><p>该问题的状态转移是，第$numRows$层与$numRows-1$层具有关系，每个数是它左上方和右上方的数之和。这样状态转移方程为：<br>$$<br>\begin{gather}<br>numRows[j]=numRows-1[j-1]+numRows-1[j-1] \<br>numsRows[0]=1\<br>numsRows[numsRows]=1<br>\end{gather}<br>$$</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>         List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> dp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意这里的 i 是指行数，但是dp是从0开始的</span>        <span class="token comment" spellcheck="true">//所以preRow是i-2</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> numRows<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> preRow <span class="token operator">=</span> dp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>preRow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> preRow<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>作者：jeromememory链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>pascals<span class="token operator">-</span>triangle<span class="token operator">/</span>solution<span class="token operator">/</span>javadi<span class="token operator">-</span>gui<span class="token operator">-</span>dong<span class="token operator">-</span>tai<span class="token operator">-</span>gui<span class="token operator">-</span>hua<span class="token operator">-</span>by<span class="token operator">-</span>jeromememory<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>给定一个非负索引 <em>k</em>，其中 <em>k</em> ≤ 33，返回杨辉三角的第 <em>k</em> 行。</p><pre class="line-numbers language-git"><code class="language-git">输入: 3输出: [1,3,3,1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>1.直接在杨辉三角的递归算法上面添加静态方法进行封装即可，调用<em>generate()</em>即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getRow</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> dg <span class="token operator">=</span>  <span class="token function">generate</span><span class="token punctuation">(</span>rowIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rowIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">int</span> numRows<span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> dg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> dg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>numRows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> dg<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dg  <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>numRows<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numRows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>dg<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>numRows<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.可以用组合数公式。杨辉三角可以看做组合数构成</p><p><img src="0.png" alt></p><p>利用组合数的关系：$C_n^k=C_n^{k-1}*(n-k+1)/k$</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getRow</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> rowIndex<span class="token punctuation">;</span>    <span class="token keyword">long</span> pre <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> cur <span class="token operator">=</span> pre <span class="token operator">*</span> <span class="token punctuation">(</span>N <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> k<span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>作者：windliang链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>pascals<span class="token operator">-</span>triangle<span class="token operator">-</span>ii<span class="token operator">/</span>solution<span class="token operator">/</span>xiang<span class="token operator">-</span>xi<span class="token operator">-</span>tong<span class="token operator">-</span>su<span class="token operator">-</span>de<span class="token operator">-</span>si<span class="token operator">-</span>lu<span class="token operator">-</span>fen<span class="token operator">-</span>xi<span class="token operator">-</span>duo<span class="token operator">-</span>jie<span class="token operator">-</span>fa<span class="token operator">-</span>by<span class="token operator">--</span><span class="token number">28</span><span class="token operator">/</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-53.最大子序和</title>
      <link href="/2020/02/07/leetcode-53-zui-da-zi-xu-he/"/>
      <url>/2020/02/07/leetcode-53-zui-da-zi-xu-he/</url>
      
        <content type="html"><![CDATA[<h1 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h1><p>给定一个整数数组<strong>nums</strong>，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>示例</strong>：</p><pre class="line-numbers language-git"><code class="language-git">输入：[-2,1,-3,4,-1,2,1,-5,4]输出：6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h1><p>首先能够想到的是暴力求解问题，对于类似[a,b,c,d]的数组，可从a开始，遍历[a],[a,b],[a,b,c],[a,b,c,d]，记录下最大值max。然后从b开始，遍历[b],[b,c],[b,c,d]依次计算数组之和，如果得到的$sum&gt;max$,则更新max。直到遍历完数组，可以得到算法的时间复杂度是$O(n^2)$。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> sum<span class="token punctuation">)</span><span class="token punctuation">{</span>                max <span class="token operator">=</span> sum<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> sum<span class="token punctuation">)</span><span class="token punctuation">{</span>                    max <span class="token operator">=</span> sum<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新最大值</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划，通过不断分解问题，可以将复杂的任务简化为最基本的小问题。我们需要在各种可能的局部解中，找出可能达到的最优解。</p><p>关键步骤：</p><ul><li>状态转移：找到子问题之间的转移</li><li>状态转移方程：用来刻画这些状态转移的表达式</li><li>利用状态转移方程自底向上求解问题</li></ul><p>首先很容易能够想到，假设$sum[i-1]$表示前面第$i-1$个子序列之和，那么当$sum[i-1]&gt;0$时，那么更新$sum[i]=sum[i-1]+n[i]$，然后判断$sum[i]=max\{sum[i-1],sum[i]\}$，那么状态转移方程为：<br>$$<br>sum[i]=max\{sum[i-1],sum[i]\}<br>$$</p><p>此时，算法的时间复杂度为$O(n)$，空间复杂度为$O(n)$，其原因是在开辟了辅助数组，增加了复杂度，对于该算法进一步优化算法，直接在原数组上进行操作，这样空间复杂度可降低为$O(1)$。</p><p><img src="0.png" alt></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> maxSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      maxSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> maxSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>作者：LeetCode链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>maximum<span class="token operator">-</span>subarray<span class="token operator">/</span>solution<span class="token operator">/</span>zui<span class="token operator">-</span>da<span class="token operator">-</span>zi<span class="token operator">-</span>xu<span class="token operator">-</span>he<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p>贪心算法，顾名思义就是在当前的阶段最初最优的选择，但是这只是基于局部最优解的情况，同时也没有办法保证能够得到全局最优解。</p><p>对于该问题，假设对于某时刻已经确定前$i-1$个元素的最大子序列之和为$currSum$，那么对于第$i$个元素而言，此时选择<br>$$<br>currSum=max\{n[i],currSum+n[i]\}<br>$$<br>记录。并且对于每次$i$的遍历更新记录所出现的最大值$globalmax$，遍历完时，只需要返回$globalmax$值即可。</p><p><img src="2.png" alt></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> currSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxSum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      currSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> currSum <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      maxSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxSum<span class="token punctuation">,</span> currSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>作者：LeetCode链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>maximum<span class="token operator">-</span>subarray<span class="token operator">/</span>solution<span class="token operator">/</span>zui<span class="token operator">-</span>da<span class="token operator">-</span>zi<span class="token operator">-</span>xu<span class="token operator">-</span>he<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2020/02/06/wang-luo-bian-cheng/"/>
      <url>/2020/02/06/wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><p>网络编程（<strong>Computer network programming</strong>）是指计算机网络编程涉及编写使程序能够跨计算机网络相互通信的计算机程序。</p><p>三要素：</p><ul><li>协议</li><li><strong>IP</strong>地址</li><li>端口号</li></ul><hr><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>计算机使多台计算机实现连接通信，其连接和通行时需要遵守一定的规则。它对数据的传输格式、传输速率、传输步骤做了统一的规定，定义了实现的标准。</p><p><img src="tcp_ip.jpg" alt></p><p><code>java.net</code>包下提供了两种常见的网络协议：</p><ul><li><p><strong>TCP/IP</strong>: 传输控制协议/因特网互联协议( <strong>Transmission Control Protocol/Internet Protocol</strong>)，是<strong>Internet</strong>最基本、最广泛的协议。它定义了计算机如何连入因特网，以及数据如何在它们之间传输的标准。它的内部包含一系列的用于处理数据通信的协议，并采用了4层的分层模型，每一层都呼叫它的下一层所提供的协议来完成自己的需求。</p></li><li><p><strong>UDP</strong>:用户数据报协议(<strong>User Datagram Protocol</strong>)。<strong>UDP</strong>是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</p></li></ul><hr><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p><strong>IP</strong>地址是指互联网协议地址（<strong>Internet Protocol Address</strong>），<strong>IP</strong>地址用来个网络中的计算机设备做唯一的编号。</p><p><strong>IP地址分类</strong></p><ul><li><strong>IPv4</strong>，是一个32位的二进制数，通常被分为4个字节。2019年11 月 25 日，全球五大区域互联网注册管理机构之一的欧洲网络协调中心（<strong>RIPE NCC</strong>）宣布 <strong>IPv4</strong> 地址已全部用完。</li><li><strong>IPv6</strong>，采用128位地址长度，每16个字节一组，分成8组十六进制数。</li></ul><hr><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>网络的通信本质是两个进程进行通信，使用<strong>IP</strong>地址可以唯一标识网络中的设备，而<strong>端口号</strong>就可以唯一标识设备中的进程。</p><p>端口号，是用两个字节表示的整数，它的取值范围为0<del>65535。其中，0</del>1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</p><p>利用<code>协议</code>+<code>IP地址</code>+<code>端口号</code> 三元组合，就可以标识网络中的进程了，那么进程间的通信就可以利用这个标识与其它进程进行交互。</p><hr><h1 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h1><p>套接字使用<strong>TCP</strong>提供了两台计算机之间的通信机制。 客户端程序创建一个套接字，并尝试连接服务器的套接字。</p><p>当连接建立时，服务器会创建一个<strong>Socket</strong> 对象。客户端和服务器现在可以通过对 <em><em>Socket </em></em>对象的写入和读取来进行通信。</p><p><code>java.net.Socket</code> 类代表一个套接字，并且 <code>java.net.ServerSocket</code> 类为服务器程序提供了一种来监听客户端，并与他们建立连接的机制。</p><p>以下步骤在两台计算机之间使用套接字建立<strong>TCP</strong>连接时会出现：</p><ul><li>服务器实例化一个<strong>SeverSocket</strong>对象，通过服务器上的端口通信</li><li>服务器调用<strong>ServerSocket</strong>类的<strong><code>accept()</code></strong>方法，该方法一直监听端口，直到客服端连接上服务器指定的端口</li><li>服务器监听时，客户端实例化一个<strong>Socket</strong>对象，指定服务器名称和端口号来请求连接</li><li><strong>Socket</strong>类的构造函数试图将客服端连接到指定的服务器和端口号</li><li>在服务器端，<strong><code>accept()</code></strong>方法返回服务器上一个新的<strong>Socket</strong>引用，该<strong>Socket</strong>连接到客服端的<strong>Socket</strong></li></ul><hr><h2 id="TCP通信"><a href="#TCP通信" class="headerlink" title="TCP通信"></a>TCP通信</h2><ul><li>客户端：<code>java.net.Socket</code> 类表示。创建<code>Socket</code>对象，向服务端发出连接请求，服务端响应请求，两者建立连接开始通信。</li><li>服务端：<code>java.net.ServerSocket</code> 类表示。创建<code>ServerSocket</code>对象，相当于开启一个服务，并等待客户端的连接。</li></ul><p><img src="%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%A1.jpg" alt></p><ul><li>1.服务器启动，创建<strong>ServerSocket</strong>对象，等待连接</li><li>2.客户端启动，创建<strong>Socket</strong>对象，请求连接</li><li>3.服务器接收连接，调用<strong>accept</strong>方法，返回一个<strong>Socket</strong>对象</li><li>4.客户端<strong>Socket</strong>对象，获取<strong>OutputStream</strong>，向服务器写出数据</li><li>5.服务器<strong>Socket</strong>对象，获取<strong>InputStream</strong>，读取客户端发送的数据</li><li>6.服务器<strong>Socket</strong>对象，获取<strong>OutputStream</strong>，向客户端回写数据</li><li>7.客户端<strong>Socket</strong>对象，获取<strong>InputStream</strong>，解析回写数据</li><li>8.客户端释放资源，断开连接</li></ul><hr><h2 id="客户端向服务器发送数据"><a href="#客户端向服务器发送数据" class="headerlink" title="客户端向服务器发送数据"></a>客户端向服务器发送数据</h2><p><strong>客户端实现</strong>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerTCP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端启动 , 等待连接 .... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.创建 ServerSocket对象，绑定端口，开始等待连接</span>        ServerSocket ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.接收连接 accept 方法, 返回 socket 对象.</span>        Socket server <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.通过socket 获取输入流</span>        InputStream is <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.一次性读取数据</span>          <span class="token comment" spellcheck="true">// 4.1 创建字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 4.2 据读取到字节数组中.</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>；        <span class="token comment" spellcheck="true">// 4.3 解析数组,打印字符串信息</span>        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.关闭资源.</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端实现</strong>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientTCP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端发送数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.创建 Socket (ip,port),确定连接到哪里.</span>        Socket client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.获取流对象 . 输出流</span>        OutputStream os <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.写出数据.</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"请求tcp"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 关闭资源 .</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="服务器向客户端回写数据"><a href="#服务器向客户端回写数据" class="headerlink" title="服务器向客户端回写数据"></a>服务器向客户端回写数据</h2><p><strong>服务端实现：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerTCP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端启动,等待连接 ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.创建 ServerSocket对象，绑定端口，开始等待连接</span>        ServerSocket ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.接收连接 accept 方法, 返回 socket 对象.</span>        Socket server <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.通过socket 获取输入流</span>        InputStream is <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.一次性读取数据</span>          <span class="token comment" spellcheck="true">// 4.1 创建字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 4.2 据读取到字节数组中.</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>；        <span class="token comment" spellcheck="true">// 4.3 解析数组,打印字符串信息</span>        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// =================回写数据=======================</span>          <span class="token comment" spellcheck="true">// 5. 通过 socket 获取输出流</span>           OutputStream out <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 6. 回写数据</span>           out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"谢谢你"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 7.关闭资源.</span>          out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户端实现：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientTCP</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端 发送数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1.创建 Socket ( ip , port ) , 确定连接到哪里.</span>        Socket client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.通过Scoket,获取输出流对象 </span>        OutputStream os <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.写出数据.</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"tcp我来了"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// ==============解析回写=========================</span>          <span class="token comment" spellcheck="true">// 4. 通过Scoket,获取 输入流对象</span>          InputStream in <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 5. 读取数据数据</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6. 关闭资源 .</span>          in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Socket类"><a href="#Socket类" class="headerlink" title="Socket类"></a>Socket类</h2><ul><li><strong><code>public Socket(String host, int port)</code></strong> :创建套接字对象并将其连接到指定主机上的指定端口号。如果指定的host是null ，则相当于指定地址为回送地址。  </li><li><strong><code>public InputStream getInputStream()</code></strong>：返回此套接字的输入流。</li><li><strong><code>public OutputStream getOutputStream()</code></strong>:返回此套接字的输出流。</li><li><strong><code>public void close()</code></strong>:关闭此套接字</li><li><strong><code>public void shutdownOutput</code></strong>:禁用此套接字的输出流</li></ul><hr><h2 id="ServerSocket类"><a href="#ServerSocket类" class="headerlink" title="ServerSocket类"></a>ServerSocket类</h2><ul><li><strong><code>public ServerSocket(int port)</code></strong>:使用该构造方法在创建ServerSocket对象时，就可以将其绑定到一个指定的端口号上，参数port就是端口号。</li><li><strong><code>public Socket accept()</code></strong>:侦听并接受连接，返回一个新的Socket对象，用于和客户端实现通信。该方法会一直阻塞直到建立连接。 </li></ul><hr><h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h2 id="InetAddress类"><a href="#InetAddress类" class="headerlink" title="InetAddress类"></a>InetAddress类</h2><p><strong>IP</strong>地址类：<strong>InetAddress</strong>类</p><blockquote><p><strong>InetAddress</strong>类没有构造方法</p></blockquote><ul><li><strong><code>byte[] getAddress()</code></strong>：返回此<strong>INetAddress</strong> 对象的原始<strong>IP</strong>地址</li><li><strong><code>static InetAddress getByName(String host)</code></strong>：在给定主机名的情况下确定主机的<strong>IP</strong>地址</li><li><strong><code>String getHostAddress()</code></strong>:返回<strong>IP</strong>地址字符串</li><li><strong><code>String getHostName()</code></strong>：获取此<strong>IP</strong>地址的主机名</li><li><strong><code>static InetAddress getLocalHost()</code></strong>：返回本地主机</li></ul><blockquote><p>127.0.01:本机地址，用于测试</p></blockquote><hr><h2 id="InetSocketAddress类"><a href="#InetSocketAddress类" class="headerlink" title="InetSocketAddress类"></a>InetSocketAddress类</h2><p>端口类：<strong>InetSocketAddress</strong>类</p><ul><li><strong><code>InetSocketAddress(InetAddress addr, int port)</code></strong>:根据<strong>IP</strong>地址和端口号创建套接字地址</li><li><strong><code>InetSocketAddress(int port)</code></strong>:创建套接字地址，其中<strong>IP</strong>地址为通配符，端口号为指定值</li><li><strong><code>InetSocketAddress(String hostname, int port)</code></strong>:根据主机名和端口号创建套接字地址</li><li><strong><code>InetAddress getAddress()</code></strong>:获取<strong>InetAddress</strong></li><li><strong><code>String getHostName()</code></strong>:获取<strong>hostname</strong></li><li><strong><code>int getPort()</code></strong>:获取端口号</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 套接字 </tag>
            
            <tag> C/S </tag>
            
            <tag> TCP/IP </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git三剑客</title>
      <link href="/2020/02/02/git/"/>
      <url>/2020/02/02/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><strong>Git</strong>作为世界上最新进的分布式版本控制系统，用于高效处理任何项目。</p><hr><h2 id="配置user信息"><a href="#配置user信息" class="headerlink" title="配置user信息"></a>配置user信息</h2><ul><li><code>$ git config --global user.name &quot;your_name&quot;</code></li><li><code>$ git config --global user.email &quot;your_email@domain.com&quot;</code></li></ul><blockquote><p>config的三个作用域</p><ul><li><code>git config --local</code>（只对某个仓库有效）</li><li><code>git config --global</code>（对当前用户所有仓库有效）</li><li><code>git config --system</code>（对系统所有登录用户有效）</li></ul><p>显示config的配置，加  –list</p><p><code>git config --list --XXX</code></p></blockquote><hr><h2 id="建Git仓库"><a href="#建Git仓库" class="headerlink" title="建Git仓库"></a>建Git仓库</h2><p>两种场景：</p><p>1.把已有的项目代码纳入<strong>Git</strong>管理</p><pre class="line-numbers language-git"><code class="language-git">$ cd 项目代码所在文件夹<span class="token command">$ git init</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.新建的项目直接用<strong>Git</strong>管理</p><pre class="line-numbers language-git"><code class="language-git">$ cd 某个文件夹<span class="token command">$ git init your_project  #会在当前路径下创建和项目名称相同的文件夹</span>$ cd your_project<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>当设置global参数后，再设置local参数，local的优先级更高</p></blockquote><h2 id="往仓库里添加文件以及常用命令"><a href="#往仓库里添加文件以及常用命令" class="headerlink" title="往仓库里添加文件以及常用命令"></a>往仓库里添加文件以及常用命令</h2><p><img src="0.png" alt></p><pre class="line-numbers language-git"><code class="language-git">Git常用命令<span class="token command">$ git add xxx #把xxx添加到仓库</span><span class="token command">$ git commit<span class="token parameter"> -m</span> </span><span class="token string">"xxx"</span> #把文件提交到仓库，xxx表示此次提交的信息<span class="token command">$ git status #查看仓库当前状态</span><span class="token command">$ git diff xxx #查看xxx修改内容</span><span class="token command">$ git log #显示提交的日志</span><span class="token command">$ git log<span class="token parameter"> --oneline</span> #查看简洁方式<span class="token parameter"> --n4</span> #所有分支最近4个<span class="token parameter"> --graph</span> #图形化</span><span class="token command">$ git reflog #查看命令历史</span><span class="token command">$ git reset<span class="token parameter"> --hard</span> commit_id #回退到某个版本</span><span class="token command">$ git mv xxx xxx.md #把xxx变更xxx.md文件名</span>$ gitk #图形界面查看版本历史<span class="token command">$ git checkout #切换分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="commit，tree和blob三个对象之间的关系"><a href="#commit，tree和blob三个对象之间的关系" class="headerlink" title="commit，tree和blob三个对象之间的关系"></a>commit，tree和blob三个对象之间的关系</h2><p>在<strong>Git</strong>中根据哈希值，像commit—&gt;tree—&gt;blob这样的树形结构连接起来。</p><p><strong>Git</strong>中不会因为文件名不同而创建不同的<strong>blob</strong>文件，而是根据哈希值来确定<strong>blob</strong>文件，这样就大大节省了<strong>Git</strong>仓库的空间大小。</p><hr><h2 id="分离头指针"><a href="#分离头指针" class="headerlink" title="分离头指针"></a>分离头指针</h2><p>如果进行了某些更改，而且十分重要，一定要和某个分支绑定在一起，<strong>Git</strong>才不会把它作为垃圾处理。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA并发实现和线程安全</title>
      <link href="/2020/02/02/java-bing-fa-shi-xian-he-xian-cheng-an-quan/"/>
      <url>/2020/02/02/java-bing-fa-shi-xian-he-xian-cheng-an-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>线程（<strong>Thread</strong>），通常是指每一个任务。多线程就是指可以同时运行一个以上线程的程序。多线程执行时，在栈内存中，每一个执行的线程都有一片自己的栈内存空间。进行方法的压栈、弹栈。</p><hr><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><ul><li><strong>New</strong>（新创建）</li><li><strong>Runnable</strong>（可运行）</li><li><strong>Blocked</strong>（被阻塞）</li><li><strong>Waiting</strong>（等待）</li><li><strong>Timed waiting</strong>（计时等待）</li><li><strong>Terminated</strong>（被终止）</li></ul><h3 id="1-线程创建"><a href="#1-线程创建" class="headerlink" title="1.线程创建"></a>1.线程创建</h3><h4 id="1-1Thread类实现"><a href="#1-1Thread类实现" class="headerlink" title="1.1Thread类实现"></a>1.1Thread类实现</h4><p><strong>JAVA</strong>中使用<code>java.lang.Thread</code>类代表线程，所有的线程对象必须是<strong>Thread</strong>类或者其子类的实例。</p><p>创建多线程步骤：</p><ul><li>1.定义<strong>Thread</strong>类的子类，重写<strong>run</strong>方法（线程执行体）</li><li>2.创建<strong>Thread</strong>子类的实例，可运用多态来创建线程对象</li><li>3.调用线程对象的<strong>start</strong>（）来启动线程</li></ul><blockquote><p>注意：</p><p>应该是调用start（）方法，而不是run（）方法。</p><p>如果调用的是run（）方法，那么只会在main方法的栈空间运行run（）中的代码，而不会开辟新的栈空间。这就不是多线程</p></blockquote><p><code>java.lang.Thread</code>类<strong>API</strong>中的一些方法：</p><p><strong>构造方法</strong>：</p><ul><li><code>public Thread()</code>:分配一个新的线程对象</li><li><code>public Thread(String name)</code>:分配一个指定参数名的线程对象</li><li><code>public Thread(Runnable target)</code>:分配一个带有指定目标新的线程对象</li><li><code>public Thread(Runnable target,String name)</code>:分配一个带有指定目标新的线程对象并指定参数名</li></ul><p><strong>常用方法</strong>：</p><ul><li><code>public String getName()</code>:获取当前线程名称</li><li><code>public void start()</code>:让此线程开始执行，<strong>JVM</strong>调用<strong>run（）</strong>方法</li><li><code>public void run()</code>：此线程要执行的任务代码</li><li><code>public static void sleep(long millis)</code>:使当前正在执行的线程暂停多少毫秒再执行</li><li><code>public static Thread currentThread()</code>:返回当前正在执行的线程对象的引用</li></ul><hr><h4 id="1-2Runnable接口实现"><a href="#1-2Runnable接口实现" class="headerlink" title="1.2Runnable接口实现"></a>1.2Runnable接口实现</h4><p>采用<code>java.lang.Runnable</code>接口，重写<strong>run（）</strong>方法</p><p>创建多线程步骤：</p><ul><li>1.定义<strong>Runnable</strong>接口的实现类，重写<strong>run（）</strong>方法</li><li>2.创建<strong>Runnable</strong>实现类的实例，并以实例作为<strong>Thread</strong>的<strong>target</strong>来穿件<strong>Thread</strong>对象，该<strong>Thread</strong>对象才是真正的线程对象</li><li>调用线程对象的<strong>start（）</strong>方法来启动线程</li></ul><hr><h4 id="1-3Thread和Runnable区别"><a href="#1-3Thread和Runnable区别" class="headerlink" title="1.3Thread和Runnable区别"></a>1.3Thread和Runnable区别</h4><ul><li>使用<strong>Thread</strong>继承方法实现多线程不适合资源贡献</li><li><strong>Runnable</strong>接口比<strong>Thread</strong>继承更有优势<ul><li>适合多个相同的程序代码的线程去共享一个资源</li><li>避免<strong>JAVA</strong>中单继承局限性</li><li>有利于程序解耦，实现设置线程任务和开启线程分离</li><li>线程池只能放入<strong>Runnable</strong>或<strong>Callable</strong>类线程，不能直接放入继承<strong>Thread</strong>类</li></ul></li></ul><blockquote><p>注意：</p><p>在JAVA中，每次程序运行至少启动两个线程。一个是main线程，一个是垃圾收集线程。</p></blockquote><h4 id="1-4匿名内部类实现线程创建"><a href="#1-4匿名内部类实现线程创建" class="headerlink" title="1.4匿名内部类实现线程创建"></a>1.4匿名内部类实现线程创建</h4><p>使用匿名内部类方式，可以方便实现每个线程任务操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    Runnable是函数式接口，可以使用lambda表达式建立一个实例    格式：        Runnable r = ()->{ code }*/</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        执行代码    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token number">2</span><span class="token punctuation">.</span>Runnable r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        执行代码    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行线程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-线程安全"><a href="#2-线程安全" class="headerlink" title="2.线程安全"></a>2.线程安全</h3><p>线程安全是由全局变量和静态变量引起，涉及到程序中共享资源的操作</p><p><strong>线程同步机制</strong></p><p><strong>JAVA</strong>中线程同步机制：</p><ul><li>同步代码块</li><li>同步方法</li><li>锁机制</li></ul><p><strong>JAVA</strong>中同步机制<code>synchronized</code>关键字</p><hr><h4 id="2-1同步代码块"><a href="#2-1同步代码块" class="headerlink" title="2.1同步代码块"></a>2.1同步代码块</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步锁<span class="token punctuation">)</span><span class="token punctuation">{</span>    同步操作代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>对象的同步锁是在对象上标记了一个锁</p><ul><li>1.锁对象可以是任意类型</li><li>2.多个线程对象要使用对一把锁，哪个线程拿到了锁就进入<strong>Runnable</strong>状态，没有得到锁的线程进入<strong>Blocked</strong>状态</li></ul></blockquote><hr><h4 id="2-2同步方法"><a href="#2-2同步方法" class="headerlink" title="2.2同步方法"></a>2.2同步方法</h4><p>同步方法是指，<code>synchronized</code>修饰的方法，保证只有一个线程使用同步方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    执行代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ul><li>1.对于非<strong>static</strong>方法，同步锁就是<strong>this</strong></li><li>2.对于<strong>static</strong>方法，同步锁就是当前当前方法所在来的字节码对象（类名.class)反射机制</li></ul></blockquote><hr><h4 id="2-3Lock锁"><a href="#2-3Lock锁" class="headerlink" title="2.3Lock锁"></a>2.3Lock锁</h4><p><code>ReentrantLock</code>类继承自<code>Lock</code>类，显式就行加锁。</p><pre class="line-numbers language-java"><code class="language-java">Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//多态</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//加同步锁</span>    执行代码    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//释放同步锁</span>    <span class="token comment" spellcheck="true">/*        这里可以采用异常处理机制        lock.lock();        try{        执行代码        }finally{        lock.unlock();}    */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ul><li>1.如果使用锁，就不能使用带资源的<strong>try</strong>语句</li><li>2.把解锁操作放在<strong>finally</strong>中至关重要。如果在临界区中的代码抛出异常，锁必须被释放。否则，其他线程将永远被阻塞</li></ul></blockquote><hr><h1 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h1><p>等待唤醒机制是多线程一种协作机制，用来合理调度资源。</p><p>等待唤醒的方法：</p><ul><li><strong>wait</strong>：线程停止活动，不再参与调度，进入<strong>wait set</strong></li><li><strong>notify</strong>： 选取通知对象中的<strong>wait set</strong>中的一个线程进行释放</li><li><strong>notify</strong>：释放通知对象的<strong>wait set</strong>中的全部线程</li></ul><blockquote><p>注意：</p><ul><li><strong>wait</strong>方法与<strong>notify</strong>方法必要由同一个锁对象调用</li><li><strong>wait</strong>方法与<strong>notify</strong>方法属于<strong>Object</strong>类的方法</li><li><strong>wait</strong>方法与<strong>notify</strong>方法必要在同步代码块或者同步函数中使用</li></ul></blockquote><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《<strong>JAVA</strong>核心技术》</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 线程 </tag>
            
            <tag> 同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Exception和Error</title>
      <link href="/2020/02/01/qian-xi-exception-he-error/"/>
      <url>/2020/02/01/qian-xi-exception-he-error/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA异常层次结构"><a href="#JAVA异常层次结构" class="headerlink" title="JAVA异常层次结构"></a>JAVA异常层次结构</h1><p><code>JAVA</code>中所有异常都是由<code>Throwable</code>继承而来，异常层次结构可从<code>Throwable</code>超类向下分为<code>Exception</code>,<code>Error</code>两个子类。</p><p><img src="0.png" alt></p><hr><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p><code>Exception</code>是程序正常运行中，可以预料的意外情况，可能并且应该被捕获，进行相应的处理。该层次结构分解为两个分支<code>IOException</code>,<code>RuntimeException</code>。划分这两个层次的规则是：由程序错误导致的异常属于<code>RuntimeException</code>;而程序本身没有问题，但由于像I/O错误这类问题导致的异常就属于<code>IOException</code>。</p><p><code>RuntimeException</code>的异常通常包含以下方面：</p><ul><li><code>ClassCastException</code></li><li><code>NullPointerException</code></li><li><code>ArrayIndexOutOfBoundsException</code></li><li><code>SecurityException</code></li></ul><p><code>IOException</code>的异常通常包含：</p><ul><li><code>Checked Exception</code>，就是必须显式地进行捕获处理，这是编译器检查的一部分。</li><li>试图在文件的尾部读取数据</li><li>试图打开一个不存在的文件</li><li>试图根据给定的字符串查找Class对象，而这个字符串表示的类并不存在</li></ul><hr><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p><code>Error</code>类层次结构描述了<code>JAVA</code>运行时系统内部错误和资源耗尽错误。绝大部分的<code>Error</code>都会导致程序（比如<code>JVM</code>自身）处于非正常的、不可恢复状态。常见比如：</p><ul><li><code>OutOfMemoryError</code></li><li><code>NoClassDefFoundError</code></li></ul><hr><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p><code>java</code>异常处理五个关键字：<strong>try、catch、finally、throw、throws</strong></p><h3 id="1-抛出异常throw"><a href="#1-抛出异常throw" class="headerlink" title="1.抛出异常throw"></a>1.抛出异常throw</h3><p><strong>throw</strong>：用来抛出一个指定的异常对象。<strong>throw</strong>用在方法中，用来抛出一个异常对象，将这个异常对象传递到调用者出，并结束当前方法的执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">throw</span> <span class="token keyword">new</span> 异常类名（参数）：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ul><li>1.<strong>throw</strong>关键字必须写在方法的内部</li><li>2.<strong>throw</strong>关键字后边<strong>new</strong>的对象必须是<strong>Exception</strong>或者<strong>Exception</strong>的子类对象</li><li>3.<strong>throw</strong>关键字抛出指定的异常对象，就必须处理这个异常对象<ul><li><strong>throw</strong>关键字后边创建的是<strong>RuntimeException</strong>或者是<strong>RuntimeException</strong>子类对象，可以不处理，默认交给<strong>JVM</strong>处理（打印异常对象，中断程序）</li><li><strong>throw</strong>关键字后边创建的是编译异常，必须使用throws或者try…catch处理</li></ul></li></ul><hr><h3 id="2-声明异常throws"><a href="#2-声明异常throws" class="headerlink" title="2.声明异常throws"></a>2.声明异常throws</h3><p><strong>throws</strong>会把异常对象声明抛出给方法的调用者处理</p><pre class="line-numbers language-java"><code class="language-java">修饰符 返回值类型 方法名（参数列表） <span class="token keyword">throws</span> AException，BException<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AException</span><span class="token punctuation">(</span><span class="token string">"原因1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BException</span><span class="token punctuation">(</span><span class="token string">"原因2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>1.<strong>throws</strong>关键字必须写在方法声明处</li><li>2.<strong>throws</strong>关键字后边声明的异常必须是Exception或者是Exception的子类</li><li>3.方法内部如果抛出了多个异常对象，那么throws后边也必须声明多个异常<ul><li>如果抛出的多个异常对象有子父类关系，直接声明父类对象</li></ul></li><li>4.调用了一个声明抛出异常的方法，就必须处理声明的异常<ul><li>要么继续使用throws声明抛出，交给方法的调用者处理，最终交给JVM</li><li>要么try…catch自己处理异常</li></ul></li></ul><hr><h3 id="3-try…catch"><a href="#3-try…catch" class="headerlink" title="3.try…catch"></a>3.try…catch</h3><p>捕获异常可设置<code>try/catch</code>语句</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    如果在try语句块中的代码没有抛出任何异常，那么程序将跳过catch字句*/</span><span class="token keyword">try</span><span class="token punctuation">{</span>    编写可能会出现异常的代码<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 e<span class="token punctuation">)</span><span class="token punctuation">{</span>    处理异常<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>1.<strong>try</strong>中可能会抛出多个异常对象，那么就可以使用多个<strong>catch</strong>来处理这些异常</li><li>2.如果<strong>try</strong>中产生了异常，那么就会执行catch中的异常处理语句，执行完毕后继续下面的代码；如果<strong>try</strong>中没有产生异常，那么就不会执行catch中处理异常的语句，继续执行<strong>try…catch</strong>之后的代码</li></ul><p>如何获取异常信息：</p><p><strong>Throwable</strong>类中定义了一些查看方法:</p><ul><li><code>public String getMessage()</code>:获取异常的描述信息,原因(提示给用户的时候,就提示错误原因。</li></ul><ul><li><code>public String toString()</code>:获取异常的类型和异常描述信息(不用)。</li><li><code>public void printStackTrace()</code>:打印异常的跟踪栈信息并输出到控制台。</li></ul><hr><h3 id="4-finally"><a href="#4-finally" class="headerlink" title="4.finally"></a>4.finally</h3><p><strong>finally</strong>：有一些代码无论异常是否发生，都需要执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    执行代码<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{</span>    处理异常<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    无论程序怎样，最终执行代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>主要在<strong>finally</strong>中处理<strong>return</strong>语句</li><li>慎用<strong>return，break，continue</strong></li><li>对于引用类型返回，要特别小心。如果在<strong>finally</strong>中改变了引用对象的成员属性，即使不显式地调用<strong>return</strong>语句，修改也会作用到返回值上</li></ul><h3 id="5-多异常处理"><a href="#5-多异常处理" class="headerlink" title="5.多异常处理"></a>5.多异常处理</h3><ul><li>多个异常分别处理</li><li>多个异常一次捕获，多次处理</li><li>多个异常一次捕获一次处理</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    最常用的是一次捕获多次处理方式*/</span><span class="token keyword">try</span><span class="token punctuation">{</span>     编写可能会出现异常的代码<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型A  e<span class="token punctuation">)</span><span class="token punctuation">{</span>  当<span class="token keyword">try</span>中出现A类型异常<span class="token punctuation">,</span>就用该<span class="token keyword">catch</span>来捕获<span class="token punctuation">.</span>     处理异常的代码     <span class="token comment" spellcheck="true">//记录日志/打印异常信息/继续抛出异常</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型B  e<span class="token punctuation">)</span><span class="token punctuation">{</span>  当<span class="token keyword">try</span>中出现B类型异常<span class="token punctuation">,</span>就用该<span class="token keyword">catch</span>来捕获<span class="token punctuation">.</span>     处理异常的代码     <span class="token comment" spellcheck="true">//记录日志/打印异常信息/继续抛出异常</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>运行时异常被抛出可以不处理，不捕获也不抛出</li><li>如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或者是父类异常的子类或者不抛出异常</li><li>父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出</li></ul><hr><h3 id="6-自定义异常类"><a href="#6-自定义异常类" class="headerlink" title="6.自定义异常类"></a>6.自定义异常类</h3><p>对于<strong>JAVA</strong>提供的异常类，不够使用，需要自己定义一些异常类</p><pre class="line-numbers language-java"><code class="language-java">格式：<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XXXException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token operator">/</span>RuntiimeException<span class="token punctuation">{</span>    添加一个空参数构造器    添加一个带异常信息的构造器<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>自定义异常类一般都是<strong>Exception</strong>结尾，说明该类是一个异常类</li><li>自定义异常类，必须继承<strong>Exception</strong>或者<strong>RuntimeException</strong><ul><li>继承<strong>Exception</strong>：那么自定义异常类就是一个编译期异常，如果方法内部抛出了编译期异常，就必须处理异常，<strong>throws</strong>或者<strong>try…catch</strong></li><li>继承<strong>RuntimeException</strong>：那么自定义异常类就是一个运行期异常，无需处理，交给<strong>JVM</strong>处理</li></ul></li></ul><hr><h1 id="异常机制的使用技巧"><a href="#异常机制的使用技巧" class="headerlink" title="异常机制的使用技巧"></a>异常机制的使用技巧</h1><ul><li>异常处理不能代替简单的测试</li><li>不要过分地细化异常</li><li>尽量不要捕获类似<strong>Exception</strong>这样的通用异常，而是捕获特定异常</li><li>不要生吞（swallow）异常</li><li>利用异常层次结构<ul><li>不要只抛出<strong>RuntimeException</strong>异常。应该寻找更加合适的子类或创建自己的异常类</li><li>不要只捕获<strong>Thowable</strong>异常，否则会使程序代码更难维护</li></ul></li><li>早抛出，晚捕获</li></ul><hr><h1 id="性能角度分析"><a href="#性能角度分析" class="headerlink" title="性能角度分析"></a>性能角度分析</h1><ul><li><strong>try…catch</strong>代码段会产生额外的性能开销，往往会影响<strong>JVM</strong>对代码的优化，所以建议只捕获有必要的代码段</li><li>利用异常控制代码流程，效果也不是很好，通常比条件语句更加低效</li></ul><hr><h1 id="NoClassDefFoundError，ClassNotFoundException辨析"><a href="#NoClassDefFoundError，ClassNotFoundException辨析" class="headerlink" title="NoClassDefFoundError，ClassNotFoundException辨析"></a>NoClassDefFoundError，ClassNotFoundException辨析</h1><p><code>ClassNotFoundException</code>产生的原因：</p><p><strong>JAVA</strong>支持使用<strong>Class.forName</strong>方法动态加载类，任意一个类的类名如果被作为参数传递给这个方法都将导致该类被加载到<strong>JVM</strong>内存中，如果这个类在类路径中没有被找到，那么此时就会在运行时抛出<strong>ClassNotFoundException</strong>异常。</p><p><code>NoClassDefFoundError</code>产生的原因：</p><p>如果<strong>JVM</strong>或者<strong>ClassLoader</strong>实例尝试加载（可以通过正常的方法调用，也可能是使用<strong>new</strong>来创建新的对象）类的时候却找不到类的定义。要查找的类在编译的时候是存在的，运行的时候却找不到。</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p>《<strong>JAVA</strong>核心技术》</p></li><li><p><a href="https://time.geekbang.org/column/intro/82" target="_blank" rel="noopener"><strong>JAVA</strong>核心技术36讲</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA异常 </tag>
            
            <tag> 捕获异常 </tag>
            
            <tag> Throwable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年总结</title>
      <link href="/2020/01/30/2019-nian-zong-jie/"/>
      <url>/2020/01/30/2019-nian-zong-jie/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=441532&auto=1&height=66"></iframe></div><h1 id="纪念2019年流逝的时光"><a href="#纪念2019年流逝的时光" class="headerlink" title="纪念2019年流逝的时光"></a>纪念2019年流逝的时光</h1><hr><ul><li><h2 id="考研"><a href="#考研" class="headerlink" title="考研"></a>考研</h2><p>2019年经历了许多有趣、难忘的事，从大一的荒废时间，到后来终于幡然醒悟。人生就是这样兜兜转转，但是最终却要把人带回应该要走的轨迹。</p><p>这一年里，面临着考研和工作的选择，选择考研这一条毫无硝烟的战役。既是对人内心的磨炼，也是对以前所欠缺的知识进行了一场恶补。不论结果如何，都是对自己大学生涯的总结。若干年后，至少心中不会抱有遗憾。</p><p><img src="0.jpg" alt></p></li></ul><ul><li><h2 id="爱情"><a href="#爱情" class="headerlink" title="爱情"></a>爱情</h2><blockquote><p>How many loved your moments of glad grace,And loved your beauty with love false or true,But one man loved the pilgrim soul in you,And loved the sorrows of your changing face.</p></blockquote><p>18年4年，遇见了她。是偶然，也是必然。我相信人生你注定要遇见的，经历的，是你逃不掉，最终必然注定的。她像一团光，那么耀眼，能够将我轻易融化。从最初表白失败到最后在一起，中间的过程是那么曲折。但是，很高兴我找到能够相伴一生的人。</p><p><img src="1.jpg" alt></p><hr></li></ul><ul><li><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><blockquote><p>时至今日你仍是我是我心中的光。——《非自然死亡》 </p></blockquote><p>未来仍将努力前行。</p><p><img src="2.jpg" alt></p><hr></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爱情 </tag>
            
            <tag> 考研 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
