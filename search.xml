<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅析Exception和Error</title>
      <link href="/2020/02/01/qian-xi-exception-he-error/"/>
      <url>/2020/02/01/qian-xi-exception-he-error/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA异常层次结构"><a href="#JAVA异常层次结构" class="headerlink" title="JAVA异常层次结构"></a>JAVA异常层次结构</h1><p><code>JAVA</code>中所有异常都是由<code>Throwable</code>继承而来，异常层次结构可从<code>Throwable</code>超类向下分为<code>Exception</code>,<code>Error</code>两个子类。</p><p><img src="0.png" alt></p><hr><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p><code>Exception</code>是程序正常运行中，可以预料的意外情况，可能并且应该被捕获，进行相应的处理。该层次结构分解为两个分支<code>IOException</code>,<code>RuntimeException</code>。划分这两个层次的规则是：由程序错误导致的异常属于<code>RuntimeException</code>;而程序本身没有问题，但由于像I/O错误这类问题导致的异常就属于<code>IOException</code>。</p><p><code>RuntimeException</code>的异常通常包含以下方面：</p><ul><li><code>ClassCastException</code></li><li><code>NullPointerException</code></li><li><code>ArrayIndexOutOfBoundsException</code></li><li><code>SecurityException</code></li></ul><p><code>IOException</code>的异常通常包含：</p><ul><li><code>Checked Exception</code>，就是必须显式地进行捕获处理，这是编译器检查的一部分。</li><li>试图在文件的尾部读取数据</li><li>试图打开一个不存在的文件</li><li>试图根据给定的字符串查找Class对象，而这个字符串表示的类并不存在</li></ul><hr><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p><code>Error</code>类层次结构描述了<code>JAVA</code>运行时系统内部错误和资源耗尽错误。绝大部分的<code>Error</code>都会导致程序（比如<code>JVM</code>自身）处于非正常的、不可恢复状态。常见比如：</p><ul><li><code>OutOfMemoryError</code></li><li><code>NoClassDefFoundError</code></li></ul><hr><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p><code>java</code>异常处理五个关键字：<strong>try、catch、finally、throw、throws</strong></p><h3 id="1-抛出异常throw"><a href="#1-抛出异常throw" class="headerlink" title="1.抛出异常throw"></a>1.抛出异常throw</h3><p><strong>throw</strong>：用来抛出一个指定的异常对象。<strong>throw</strong>用在方法中，用来抛出一个异常对象，将这个异常对象传递到调用者出，并结束当前方法的执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">throw</span> <span class="token keyword">new</span> 异常类名（参数）：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ul><li>1.<strong>throw</strong>关键字必须写在方法的内部</li><li>2.<strong>throw</strong>关键字后边<strong>new</strong>的对象必须是<strong>Exception</strong>或者<strong>Exception</strong>的子类对象</li><li>3.<strong>throw</strong>关键字抛出指定的异常对象，就必须处理这个异常对象<ul><li><strong>throw</strong>关键字后边创建的是<strong>RuntimeException</strong>或者是<strong>RuntimeException</strong>子类对象，可以不处理，默认交给<strong>JVM</strong>处理（打印异常对象，中断程序）</li><li><strong>throw</strong>关键字后边创建的是编译异常，必须使用throws或者try…catch处理</li></ul></li></ul><hr><h3 id="2-声明异常throws"><a href="#2-声明异常throws" class="headerlink" title="2.声明异常throws"></a>2.声明异常throws</h3><p><strong>throws</strong>会把异常对象声明抛出给方法的调用者处理</p><pre class="line-numbers language-java"><code class="language-java">修饰符 返回值类型 方法名（参数列表） <span class="token keyword">throws</span> AException，BException<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AException</span><span class="token punctuation">(</span><span class="token string">"原因1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BException</span><span class="token punctuation">(</span><span class="token string">"原因2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>1.<strong>throws</strong>关键字必须写在方法声明处</li><li>2.<strong>throws</strong>关键字后边声明的异常必须是Exception或者是Exception的子类</li><li>3.方法内部如果抛出了多个异常对象，那么throws后边也必须声明多个异常<ul><li>如果抛出的多个异常对象有子父类关系，直接声明父类对象</li></ul></li><li>4.调用了一个声明抛出异常的方法，就必须处理声明的异常<ul><li>要么继续使用throws声明抛出，交给方法的调用者处理，最终交给JVM</li><li>要么try…catch自己处理异常</li></ul></li></ul><hr><h3 id="3-try…catch"><a href="#3-try…catch" class="headerlink" title="3.try…catch"></a>3.try…catch</h3><p>捕获异常可设置<code>try/catch</code>语句</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    如果在try语句块中的代码没有抛出任何异常，那么程序将跳过catch字句*/</span><span class="token keyword">try</span><span class="token punctuation">{</span>    编写可能会出现异常的代码<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型 e<span class="token punctuation">)</span><span class="token punctuation">{</span>    处理异常<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>1.<strong>try</strong>中可能会抛出多个异常对象，那么就可以使用多个<strong>catch</strong>来处理这些异常</li><li>2.如果<strong>try</strong>中产生了异常，那么就会执行catch中的异常处理语句，执行完毕后继续下面的代码；如果<strong>try</strong>中没有产生异常，那么就不会执行catch中处理异常的语句，继续执行<strong>try…catch</strong>之后的代码</li></ul><p>如何获取异常信息：</p><p><strong>Throwable</strong>类中定义了一些查看方法:</p><ul><li><code>public String getMessage()</code>:获取异常的描述信息,原因(提示给用户的时候,就提示错误原因。</li></ul><ul><li><code>public String toString()</code>:获取异常的类型和异常描述信息(不用)。</li><li><code>public void printStackTrace()</code>:打印异常的跟踪栈信息并输出到控制台。</li></ul><hr><h3 id="4-finally"><a href="#4-finally" class="headerlink" title="4.finally"></a>4.finally</h3><p><strong>finally</strong>：有一些代码无论异常是否发生，都需要执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    执行代码<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">{</span>    处理异常<span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    无论程序怎样，最终执行代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>主要在<strong>finally</strong>中处理<strong>return</strong>语句</li><li>慎用<strong>return，break，continue</strong></li><li>对于引用类型返回，要特别小心。如果在<strong>finally</strong>中改变了引用对象的成员属性，即使不显式地调用<strong>return</strong>语句，修改也会作用到返回值上</li></ul><h3 id="5-多异常处理"><a href="#5-多异常处理" class="headerlink" title="5.多异常处理"></a>5.多异常处理</h3><ul><li>多个异常分别处理</li><li>多个异常一次捕获，多次处理</li><li>多个异常一次捕获一次处理</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    最常用的是一次捕获多次处理方式*/</span><span class="token keyword">try</span><span class="token punctuation">{</span>     编写可能会出现异常的代码<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型A  e<span class="token punctuation">)</span><span class="token punctuation">{</span>  当<span class="token keyword">try</span>中出现A类型异常<span class="token punctuation">,</span>就用该<span class="token keyword">catch</span>来捕获<span class="token punctuation">.</span>     处理异常的代码     <span class="token comment" spellcheck="true">//记录日志/打印异常信息/继续抛出异常</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型B  e<span class="token punctuation">)</span><span class="token punctuation">{</span>  当<span class="token keyword">try</span>中出现B类型异常<span class="token punctuation">,</span>就用该<span class="token keyword">catch</span>来捕获<span class="token punctuation">.</span>     处理异常的代码     <span class="token comment" spellcheck="true">//记录日志/打印异常信息/继续抛出异常</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>运行时异常被抛出可以不处理，不捕获也不抛出</li><li>如果父类抛出了多个异常,子类重写父类方法时,抛出和父类相同的异常或者是父类异常的子类或者不抛出异常</li><li>父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出</li></ul><hr><h3 id="6-自定义异常类"><a href="#6-自定义异常类" class="headerlink" title="6.自定义异常类"></a>6.自定义异常类</h3><p>对于<strong>JAVA</strong>提供的异常类，不够使用，需要自己定义一些异常类</p><pre class="line-numbers language-java"><code class="language-java">格式：<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XXXException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token operator">/</span>RuntiimeException<span class="token punctuation">{</span>    添加一个空参数构造器    添加一个带异常信息的构造器<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>自定义异常类一般都是<strong>Exception</strong>结尾，说明该类是一个异常类</li><li>自定义异常类，必须继承<strong>Exception</strong>或者<strong>RuntimeException</strong><ul><li>继承<strong>Exception</strong>：那么自定义异常类就是一个编译期异常，如果方法内部抛出了编译期异常，就必须处理异常，<strong>throws</strong>或者<strong>try…catch</strong></li><li>继承<strong>RuntimeException</strong>：那么自定义异常类就是一个运行期异常，无需处理，交给<strong>JVM</strong>处理</li></ul></li></ul><hr><h1 id="异常机制的使用技巧"><a href="#异常机制的使用技巧" class="headerlink" title="异常机制的使用技巧"></a>异常机制的使用技巧</h1><ul><li>异常处理不能代替简单的测试</li><li>不要过分地细化异常</li><li>尽量不要捕获类似<strong>Exception</strong>这样的通用异常，而是捕获特定异常</li><li>不要生吞（swallow）异常</li><li>利用异常层次结构<ul><li>不要只抛出<strong>RuntimeException</strong>异常。应该寻找更加合适的子类或创建自己的异常类</li><li>不要只捕获<strong>Thowable</strong>异常，否则会使程序代码更难维护</li></ul></li><li>早抛出，晚捕获</li></ul><hr><h1 id="性能角度分析"><a href="#性能角度分析" class="headerlink" title="性能角度分析"></a>性能角度分析</h1><ul><li><strong>try…catch</strong>代码段会产生额外的性能开销，往往会影响<strong>JVM</strong>对代码的优化，所以建议只捕获有必要的代码段</li><li>利用异常控制代码流程，效果也不是很好，通常比条件语句更加低效</li></ul><hr><h1 id="NoClassDefFoundError，ClassNotFoundException辨析"><a href="#NoClassDefFoundError，ClassNotFoundException辨析" class="headerlink" title="NoClassDefFoundError，ClassNotFoundException辨析"></a>NoClassDefFoundError，ClassNotFoundException辨析</h1><p><code>ClassNotFoundException</code>产生的原因：</p><p><strong>JAVA</strong>支持使用<strong>Class.forName</strong>方法动态加载类，任意一个类的类名如果被作为参数传递给这个方法都将导致该类被加载到<strong>JVM</strong>内存中，如果这个类在类路径中没有被找到，那么此时就会在运行时抛出<strong>ClassNotFoundException</strong>异常。</p><p><code>NoClassDefFoundError</code>产生的原因：</p><p>如果<strong>JVM</strong>或者<strong>ClassLoader</strong>实例尝试加载（可以通过正常的方法调用，也可能是使用<strong>new</strong>来创建新的对象）类的时候却找不到类的定义。要查找的类在编译的时候是存在的，运行的时候却找不到。</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p>《<strong>JAVA</strong>核心技术》</p></li><li><p><a href="https://time.geekbang.org/column/intro/82" target="_blank" rel="noopener"><strong>JAVA</strong>核心技术36讲</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA异常 </tag>
            
            <tag> 捕获异常 </tag>
            
            <tag> Throwable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年总结</title>
      <link href="/2020/01/30/2019-nian-zong-jie/"/>
      <url>/2020/01/30/2019-nian-zong-jie/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=441532&auto=1&height=66"></iframe></div><h1 id="纪念2019年流逝的时光"><a href="#纪念2019年流逝的时光" class="headerlink" title="纪念2019年流逝的时光"></a>纪念2019年流逝的时光</h1><hr><ul><li><h2 id="考研"><a href="#考研" class="headerlink" title="考研"></a>考研</h2><p>2019年经历了许多有趣、难忘的事，从大一的荒废时间，到后来终于幡然醒悟。人生就是这样兜兜转转，但是最终却要把人带回应该要走的轨迹。</p><p>这一年里，面临着考研和工作的选择，选择考研这一条毫无硝烟的战役。既是对人内心的磨炼，也是对以前所欠缺的知识进行了一场恶补。不论结果如何，都是对自己大学生涯的总结。若干年后，至少心中不会抱有遗憾。</p><p><img src="0.jpg" alt></p></li></ul><ul><li><h2 id="爱情"><a href="#爱情" class="headerlink" title="爱情"></a>爱情</h2><blockquote><p>How many loved your moments of glad grace,And loved your beauty with love false or true,But one man loved the pilgrim soul in you,And loved the sorrows of your changing face.</p></blockquote><p>18年4年，遇见了她。是偶然，也是必然。我相信人生你注定要遇见的，经历的，是你逃不掉，最终必然注定的。她像一团光，那么耀眼，能够将我轻易融化。从最初表白失败到最后在一起，中间的过程是那么曲折。但是，很高兴我找到能够相伴一生的人。</p><p><img src="1.jpg" alt></p><hr></li></ul><ul><li><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><blockquote><p>时至今日你仍是我是我心中的光。——《非自然死亡》 </p></blockquote><p>未来仍将努力前行。</p><p><img src="2.jpg" alt></p><hr></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爱情 </tag>
            
            <tag> 考研 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
